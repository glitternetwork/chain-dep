// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: engine/rpc.proto

package engine

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	common "github.com/glitternetwork/chain-dep/glitter_proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SQLSyncRequest struct {
	Sql        string             `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Uid        string             `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	OnTable    string             `protobuf:"bytes,3,opt,name=onTable,proto3" json:"onTable,omitempty"`
	ToUID      string             `protobuf:"bytes,4,opt,name=toUID,proto3" json:"toUID,omitempty"`
	Role       string             `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	OnDatabase string             `protobuf:"bytes,6,opt,name=onDatabase,proto3" json:"onDatabase,omitempty"`
	TxIndex    string             `protobuf:"bytes,7,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	TxID       string             `protobuf:"bytes,8,opt,name=txID,proto3" json:"txID,omitempty"`
	TxType     string             `protobuf:"bytes,9,opt,name=txType,proto3" json:"txType,omitempty"`
	Arguments  []*common.Argument `protobuf:"bytes,10,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *SQLSyncRequest) Reset()         { *m = SQLSyncRequest{} }
func (m *SQLSyncRequest) String() string { return proto.CompactTextString(m) }
func (*SQLSyncRequest) ProtoMessage()    {}
func (*SQLSyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{0}
}
func (m *SQLSyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLSyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLSyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLSyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLSyncRequest.Merge(m, src)
}
func (m *SQLSyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLSyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLSyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLSyncRequest proto.InternalMessageInfo

func (m *SQLSyncRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *SQLSyncRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SQLSyncRequest) GetOnTable() string {
	if m != nil {
		return m.OnTable
	}
	return ""
}

func (m *SQLSyncRequest) GetToUID() string {
	if m != nil {
		return m.ToUID
	}
	return ""
}

func (m *SQLSyncRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *SQLSyncRequest) GetOnDatabase() string {
	if m != nil {
		return m.OnDatabase
	}
	return ""
}

func (m *SQLSyncRequest) GetTxIndex() string {
	if m != nil {
		return m.TxIndex
	}
	return ""
}

func (m *SQLSyncRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *SQLSyncRequest) GetTxType() string {
	if m != nil {
		return m.TxType
	}
	return ""
}

func (m *SQLSyncRequest) GetArguments() []*common.Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SQLSyncResponse struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SQLSyncResponse) Reset()         { *m = SQLSyncResponse{} }
func (m *SQLSyncResponse) String() string { return proto.CompactTextString(m) }
func (*SQLSyncResponse) ProtoMessage()    {}
func (*SQLSyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{1}
}
func (m *SQLSyncResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLSyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLSyncResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLSyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLSyncResponse.Merge(m, src)
}
func (m *SQLSyncResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLSyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLSyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLSyncResponse proto.InternalMessageInfo

func (m *SQLSyncResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SQLSyncResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SQLQueryRequest struct {
	Sql       string             `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Arguments []*common.Argument `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *SQLQueryRequest) Reset()         { *m = SQLQueryRequest{} }
func (m *SQLQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SQLQueryRequest) ProtoMessage()    {}
func (*SQLQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{2}
}
func (m *SQLQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQueryRequest.Merge(m, src)
}
func (m *SQLQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQueryRequest proto.InternalMessageInfo

func (m *SQLQueryRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *SQLQueryRequest) GetArguments() []*common.Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SQLQueryResponse struct {
	Results   []*common.ResultSet `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TookTimes float32             `protobuf:"fixed32,2,opt,name=took_times,json=tookTimes,proto3" json:"took_times,omitempty"`
}

func (m *SQLQueryResponse) Reset()         { *m = SQLQueryResponse{} }
func (m *SQLQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SQLQueryResponse) ProtoMessage()    {}
func (*SQLQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{3}
}
func (m *SQLQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQueryResponse.Merge(m, src)
}
func (m *SQLQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQueryResponse proto.InternalMessageInfo

func (m *SQLQueryResponse) GetResults() []*common.ResultSet {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SQLQueryResponse) GetTookTimes() float32 {
	if m != nil {
		return m.TookTimes
	}
	return 0
}

type SimpleSQLQueryResponse struct {
	Result []*SimpleSQLQueryResponse_ResultSet `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (m *SimpleSQLQueryResponse) Reset()         { *m = SimpleSQLQueryResponse{} }
func (m *SimpleSQLQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse) ProtoMessage()    {}
func (*SimpleSQLQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{4}
}
func (m *SimpleSQLQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse.Merge(m, src)
}
func (m *SimpleSQLQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse) GetResult() []*SimpleSQLQueryResponse_ResultSet {
	if m != nil {
		return m.Result
	}
	return nil
}

type SimpleSQLQueryResponse_ResultSet struct {
	Row map[string]*SimpleSQLQueryResponse_RowValue `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimpleSQLQueryResponse_ResultSet) Reset()         { *m = SimpleSQLQueryResponse_ResultSet{} }
func (m *SimpleSQLQueryResponse_ResultSet) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse_ResultSet) ProtoMessage()    {}
func (*SimpleSQLQueryResponse_ResultSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{4, 0}
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.Merge(m, src)
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse_ResultSet proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse_ResultSet) GetRow() map[string]*SimpleSQLQueryResponse_RowValue {
	if m != nil {
		return m.Row
	}
	return nil
}

type SimpleSQLQueryResponse_RowValue struct {
	Value           string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ColumnValueType common.ColumnValueType `protobuf:"varint,2,opt,name=column_value_type,json=columnValueType,proto3,enum=common.ColumnValueType" json:"column_value_type,omitempty"`
}

func (m *SimpleSQLQueryResponse_RowValue) Reset()         { *m = SimpleSQLQueryResponse_RowValue{} }
func (m *SimpleSQLQueryResponse_RowValue) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse_RowValue) ProtoMessage()    {}
func (*SimpleSQLQueryResponse_RowValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_44d40c67387e7e59, []int{4, 1}
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse_RowValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse_RowValue.Merge(m, src)
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse_RowValue.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse_RowValue proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse_RowValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SimpleSQLQueryResponse_RowValue) GetColumnValueType() common.ColumnValueType {
	if m != nil {
		return m.ColumnValueType
	}
	return common.ColumnValueType_InvalidColumn
}

func init() {
	proto.RegisterType((*SQLSyncRequest)(nil), "engine.SQLSyncRequest")
	proto.RegisterType((*SQLSyncResponse)(nil), "engine.SQLSyncResponse")
	proto.RegisterType((*SQLQueryRequest)(nil), "engine.SQLQueryRequest")
	proto.RegisterType((*SQLQueryResponse)(nil), "engine.SQLQueryResponse")
	proto.RegisterType((*SimpleSQLQueryResponse)(nil), "engine.SimpleSQLQueryResponse")
	proto.RegisterType((*SimpleSQLQueryResponse_ResultSet)(nil), "engine.SimpleSQLQueryResponse.ResultSet")
	proto.RegisterMapType((map[string]*SimpleSQLQueryResponse_RowValue)(nil), "engine.SimpleSQLQueryResponse.ResultSet.RowEntry")
	proto.RegisterType((*SimpleSQLQueryResponse_RowValue)(nil), "engine.SimpleSQLQueryResponse.RowValue")
}

func init() { proto.RegisterFile("engine/rpc.proto", fileDescriptor_44d40c67387e7e59) }

var fileDescriptor_44d40c67387e7e59 = []byte{
	// 686 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0xc6, 0x0e, 0x04, 0x32, 0xe8, 0x87, 0xb0, 0x42, 0x60, 0x59, 0xff, 0x6f, 0x21, 0x4b, 0xbf,
	0x40, 0xa5, 0x8d, 0xd5, 0xf4, 0x00, 0x42, 0xaa, 0xd4, 0x16, 0x7a, 0x40, 0xea, 0x85, 0x0d, 0xed,
	0xa1, 0x87, 0x5a, 0x8e, 0xb3, 0x32, 0x6e, 0xec, 0x5d, 0xc7, 0xbb, 0x26, 0xc9, 0xa1, 0x97, 0x3e,
	0x40, 0x55, 0xa9, 0x4f, 0xd1, 0x63, 0xdf, 0xa2, 0x47, 0xa4, 0x5e, 0x7a, 0xac, 0xa0, 0xaf, 0xd0,
	0x7b, 0xb5, 0xbb, 0x36, 0x24, 0xa2, 0x40, 0x6f, 0x33, 0xdf, 0xcc, 0x7c, 0xdf, 0xf8, 0xf3, 0xd8,
	0xd0, 0x24, 0x34, 0x8a, 0x29, 0xf1, 0xf2, 0x2c, 0x6c, 0x65, 0x39, 0x13, 0x0c, 0xd5, 0x35, 0x62,
	0xaf, 0x46, 0x2c, 0x62, 0x0a, 0xf2, 0x64, 0xa4, 0xab, 0xf6, 0xbf, 0x11, 0x63, 0x51, 0x42, 0xbc,
	0x20, 0x8b, 0xbd, 0x80, 0x52, 0x26, 0x02, 0x11, 0x33, 0xca, 0xcb, 0xea, 0x7a, 0xc8, 0xd2, 0x94,
	0x51, 0x8f, 0x0f, 0x12, 0x5f, 0xd3, 0xe8, 0x82, 0xfb, 0xc1, 0x84, 0xa5, 0xce, 0xd1, 0x8b, 0xce,
	0x98, 0x86, 0x98, 0x0c, 0x0a, 0xc2, 0x05, 0x6a, 0x42, 0x8d, 0x0f, 0x12, 0xcb, 0xd8, 0x30, 0xb6,
	0x1a, 0x58, 0x86, 0x12, 0x29, 0xe2, 0x9e, 0x65, 0x6a, 0xa4, 0x88, 0x7b, 0xc8, 0x82, 0x79, 0x46,
	0x8f, 0x83, 0x6e, 0x42, 0xac, 0x9a, 0x42, 0xab, 0x14, 0xad, 0xc2, 0x9c, 0x60, 0x2f, 0x0f, 0x0f,
	0xac, 0x59, 0x85, 0xeb, 0x04, 0x21, 0x98, 0xcd, 0x59, 0x42, 0xac, 0x39, 0x05, 0xaa, 0x18, 0x39,
	0x00, 0x8c, 0x1e, 0x04, 0x22, 0xe8, 0x06, 0x9c, 0x58, 0x75, 0x55, 0x99, 0x40, 0xa4, 0x86, 0x18,
	0x1d, 0xd2, 0x1e, 0x19, 0x59, 0xf3, 0x5a, 0xa3, 0x4c, 0x25, 0x9b, 0x18, 0x1d, 0x1e, 0x58, 0x0b,
	0x9a, 0x4d, 0xc6, 0x68, 0x0d, 0xea, 0x62, 0x74, 0x3c, 0xce, 0x88, 0xd5, 0x50, 0x68, 0x99, 0xa1,
	0x16, 0x34, 0x82, 0x3c, 0x2a, 0x52, 0x42, 0x05, 0xb7, 0x60, 0xa3, 0xb6, 0xb5, 0xd8, 0x6e, 0xb6,
	0xb4, 0x1b, 0xad, 0xa7, 0x65, 0x01, 0x5f, 0xb5, 0xb8, 0x3b, 0xb0, 0x7c, 0xe9, 0x07, 0xcf, 0x18,
	0xe5, 0x44, 0xca, 0x85, 0xac, 0x47, 0x94, 0x23, 0xff, 0x60, 0x15, 0x4b, 0x4b, 0x52, 0x1e, 0x55,
	0x96, 0xa4, 0x3c, 0x72, 0x3b, 0x6a, 0xf0, 0xa8, 0x20, 0xf9, 0xf8, 0x66, 0x27, 0xa7, 0xb6, 0x31,
	0xef, 0xde, 0xe6, 0x0d, 0x34, 0xaf, 0x48, 0xcb, 0x75, 0xb6, 0x61, 0x3e, 0x27, 0xbc, 0x48, 0x04,
	0xb7, 0x0c, 0xc5, 0xb0, 0x52, 0x31, 0x60, 0x05, 0x77, 0x88, 0xc0, 0x55, 0x07, 0xfa, 0x0f, 0x40,
	0x30, 0xd6, 0xf7, 0x45, 0x9c, 0x12, 0xae, 0xd6, 0x35, 0x71, 0x43, 0x22, 0xc7, 0x12, 0x70, 0x7f,
	0x99, 0xb0, 0xd6, 0x89, 0xd3, 0x2c, 0x21, 0xd7, 0x64, 0x9e, 0x40, 0x5d, 0x93, 0x94, 0x2a, 0x5b,
	0xad, 0xf2, 0x70, 0xfe, 0xdc, 0x3f, 0x21, 0x5e, 0xce, 0xd9, 0x5f, 0x0c, 0x68, 0x5c, 0xa2, 0x68,
	0x1f, 0x6a, 0x39, 0x1b, 0x96, 0x64, 0x0f, 0xff, 0x96, 0xac, 0x85, 0xd9, 0xf0, 0x39, 0x15, 0xf9,
	0x18, 0xcb, 0x69, 0xdb, 0x87, 0x85, 0x0a, 0x90, 0xee, 0xf6, 0xc9, 0xb8, 0x72, 0xb7, 0x4f, 0xc6,
	0xe8, 0x31, 0xcc, 0x9d, 0x06, 0x49, 0x41, 0xd4, 0x73, 0x2e, 0xb6, 0x37, 0xef, 0x12, 0x61, 0xc3,
	0x57, 0xb2, 0x1d, 0xeb, 0xa9, 0x3d, 0x73, 0xd7, 0xb0, 0x89, 0x12, 0x50, 0xb0, 0x3c, 0x65, 0x4d,
	0xa7, 0x25, 0x74, 0x82, 0xf6, 0x61, 0x25, 0x64, 0x49, 0x91, 0x52, 0x5f, 0xe5, 0xbe, 0x90, 0x37,
	0x27, 0x05, 0x97, 0xda, 0xeb, 0xd5, 0x8b, 0xd8, 0x57, 0x0d, 0x8a, 0x45, 0x1e, 0x21, 0x5e, 0x0e,
	0xa7, 0x81, 0xf6, 0x67, 0x13, 0x6a, 0x38, 0x0b, 0xd1, 0x0e, 0xcc, 0xca, 0x53, 0x43, 0x6b, 0x97,
	0xab, 0x4e, 0x7d, 0x8b, 0xf6, 0xfa, 0x35, 0xbc, 0x7c, 0x3b, 0x6f, 0x61, 0xa1, 0x7a, 0x1e, 0x34,
	0xd9, 0x34, 0x79, 0x7f, 0xb6, 0x75, 0xbd, 0xa0, 0xc7, 0xdd, 0xed, 0xf7, 0xdf, 0x7e, 0x7e, 0x32,
	0xff, 0x77, 0x37, 0xbc, 0x6e, 0xc2, 0xc2, 0xfe, 0x29, 0xe9, 0x79, 0xe5, 0xff, 0x26, 0x96, 0x5f,
	0x98, 0xfc, 0x4f, 0x78, 0x03, 0x39, 0xb1, 0x67, 0xdc, 0x43, 0xef, 0x60, 0x69, 0xda, 0xc1, 0x9b,
	0x15, 0x9d, 0xdb, 0x2d, 0x77, 0xdb, 0x4a, 0xf7, 0xbe, 0xbb, 0x79, 0x8b, 0x2e, 0x57, 0xa3, 0x7e,
	0x25, 0xff, 0x0c, 0x7f, 0x3d, 0x77, 0x8c, 0xb3, 0x73, 0xc7, 0xf8, 0x71, 0xee, 0x18, 0x1f, 0x2f,
	0x9c, 0x99, 0xb3, 0x0b, 0x67, 0xe6, 0xfb, 0x85, 0x33, 0xf3, 0x7a, 0x37, 0x8a, 0xc5, 0x49, 0xd1,
	0x95, 0xae, 0x7b, 0x51, 0x12, 0x0b, 0x41, 0x72, 0x4a, 0xc4, 0x90, 0xe5, 0x7d, 0x2f, 0x3c, 0x09,
	0x62, 0xfa, 0xa0, 0x47, 0xb2, 0xaa, 0xe0, 0xeb, 0x3f, 0xa6, 0x56, 0xeb, 0xd6, 0x55, 0xf6, 0xe8,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x88, 0x26, 0xd0, 0x66, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClient interface {
	Sync(ctx context.Context, in *SQLSyncRequest, opts ...grpc.CallOption) (*SQLSyncResponse, error)
	SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResponse, error)
	SimpleSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SimpleSQLQueryResponse, error)
}

type rpcClient struct {
	cc grpc1.ClientConn
}

func NewRpcClient(cc grpc1.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Sync(ctx context.Context, in *SQLSyncRequest, opts ...grpc.CallOption) (*SQLSyncResponse, error) {
	out := new(SQLSyncResponse)
	err := c.cc.Invoke(ctx, "/engine.Rpc/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResponse, error) {
	out := new(SQLQueryResponse)
	err := c.cc.Invoke(ctx, "/engine.Rpc/SQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SimpleSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SimpleSQLQueryResponse, error) {
	out := new(SimpleSQLQueryResponse)
	err := c.cc.Invoke(ctx, "/engine.Rpc/SimpleSQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
type RpcServer interface {
	Sync(context.Context, *SQLSyncRequest) (*SQLSyncResponse, error)
	SQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResponse, error)
	SimpleSQLQuery(context.Context, *SQLQueryRequest) (*SimpleSQLQueryResponse, error)
}

// UnimplementedRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (*UnimplementedRpcServer) Sync(ctx context.Context, req *SQLSyncRequest) (*SQLSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedRpcServer) SQLQuery(ctx context.Context, req *SQLQueryRequest) (*SQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLQuery not implemented")
}
func (*UnimplementedRpcServer) SimpleSQLQuery(ctx context.Context, req *SQLQueryRequest) (*SimpleSQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleSQLQuery not implemented")
}

func RegisterRpcServer(s grpc1.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Rpc/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Sync(ctx, req.(*SQLSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Rpc/SQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SimpleSQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SimpleSQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.Rpc/SimpleSQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SimpleSQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Rpc_Sync_Handler,
		},
		{
			MethodName: "SQLQuery",
			Handler:    _Rpc_SQLQuery_Handler,
		},
		{
			MethodName: "SimpleSQLQuery",
			Handler:    _Rpc_SimpleSQLQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine/rpc.proto",
}

func (m *SQLSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLSyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TxType) > 0 {
		i -= len(m.TxType)
		copy(dAtA[i:], m.TxType)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TxType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TxIndex) > 0 {
		i -= len(m.TxIndex)
		copy(dAtA[i:], m.TxIndex)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TxIndex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OnDatabase) > 0 {
		i -= len(m.OnDatabase)
		copy(dAtA[i:], m.OnDatabase)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.OnDatabase)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToUID) > 0 {
		i -= len(m.ToUID)
		copy(dAtA[i:], m.ToUID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ToUID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OnTable) > 0 {
		i -= len(m.OnTable)
		copy(dAtA[i:], m.OnTable)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.OnTable)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLSyncResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SQLQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TookTimes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TookTimes))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse_ResultSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse_ResultSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse_ResultSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k := range m.Row {
			v := m.Row[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRpc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse_RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse_RowValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse_RowValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnValueType != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ColumnValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SQLSyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.OnTable)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.ToUID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.OnDatabase)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.TxIndex)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.TxType)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *SQLSyncResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRpc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *SQLQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *SQLQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if m.TookTimes != 0 {
		n += 5
	}
	return n
}

func (m *SimpleSQLQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *SimpleSQLQueryResponse_ResultSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k, v := range m.Row {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRpc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRpc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimpleSQLQueryResponse_RowValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ColumnValueType != 0 {
		n += 1 + sovRpc(uint64(m.ColumnValueType))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SQLSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnTable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnTable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDatabase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnDatabase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &common.Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &common.Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &common.ResultSet{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TookTimes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TookTimes = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleSQLQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleSQLQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &SimpleSQLQueryResponse_ResultSet{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse_ResultSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = make(map[string]*SimpleSQLQueryResponse_RowValue)
			}
			var mapkey string
			var mapvalue *SimpleSQLQueryResponse_RowValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRpc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRpc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SimpleSQLQueryResponse_RowValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Row[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse_RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValueType", wireType)
			}
			m.ColumnValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnValueType |= common.ColumnValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
