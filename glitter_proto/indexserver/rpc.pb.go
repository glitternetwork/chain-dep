// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indexserver/rpc.proto

package indexserver

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	common "github.com/glitternetwork/chain-dep/glitter_proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExecuteStatus int32

const (
	ExecuteStatus_Success   ExecuteStatus = 0
	ExecuteStatus_Executing ExecuteStatus = 1
	ExecuteStatus_Failed    ExecuteStatus = 3
	ExecuteStatus_Unkown    ExecuteStatus = 4
)

var ExecuteStatus_name = map[int32]string{
	0: "Success",
	1: "Executing",
	3: "Failed",
	4: "Unkown",
}

var ExecuteStatus_value = map[string]int32{
	"Success":   0,
	"Executing": 1,
	"Failed":    3,
	"Unkown":    4,
}

func (x ExecuteStatus) String() string {
	return proto.EnumName(ExecuteStatus_name, int32(x))
}

func (ExecuteStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{0}
}

type ExecuteRequest struct {
	UID       string             `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	SQL       string             `protobuf:"bytes,2,opt,name=SQL,proto3" json:"SQL,omitempty"`
	Arguments []*common.Argument `protobuf:"bytes,3,rep,name=Arguments,proto3" json:"Arguments,omitempty"`
	TraceID   string             `protobuf:"bytes,4,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	TxID      string             `protobuf:"bytes,5,opt,name=TxID,proto3" json:"TxID,omitempty"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{0}
}
func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ExecuteRequest) GetSQL() string {
	if m != nil {
		return m.SQL
	}
	return ""
}

func (m *ExecuteRequest) GetArguments() []*common.Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ExecuteRequest) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *ExecuteRequest) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

type ExecuteResponse struct {
	TraceID      string `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	Success      bool   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	ErrorCode    int32  `protobuf:"varint,3,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ErrorMessage string `protobuf:"bytes,4,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{1}
}
func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *ExecuteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ExecuteResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ExecuteResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type BatchExecuteRequest struct {
	Requests []*ExecuteRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *BatchExecuteRequest) Reset()         { *m = BatchExecuteRequest{} }
func (m *BatchExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*BatchExecuteRequest) ProtoMessage()    {}
func (*BatchExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{2}
}
func (m *BatchExecuteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchExecuteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchExecuteRequest.Merge(m, src)
}
func (m *BatchExecuteRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchExecuteRequest proto.InternalMessageInfo

func (m *BatchExecuteRequest) GetRequests() []*ExecuteRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type BatchExecuteResponse struct {
	Responses []*ExecuteResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (m *BatchExecuteResponse) Reset()         { *m = BatchExecuteResponse{} }
func (m *BatchExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*BatchExecuteResponse) ProtoMessage()    {}
func (*BatchExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{3}
}
func (m *BatchExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchExecuteResponse.Merge(m, src)
}
func (m *BatchExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *BatchExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchExecuteResponse proto.InternalMessageInfo

func (m *BatchExecuteResponse) GetResponses() []*ExecuteResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type QueryExecuteResultRequest struct {
	TraceID string `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
}

func (m *QueryExecuteResultRequest) Reset()         { *m = QueryExecuteResultRequest{} }
func (m *QueryExecuteResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExecuteResultRequest) ProtoMessage()    {}
func (*QueryExecuteResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{4}
}
func (m *QueryExecuteResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecuteResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecuteResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecuteResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecuteResultRequest.Merge(m, src)
}
func (m *QueryExecuteResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecuteResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecuteResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecuteResultRequest proto.InternalMessageInfo

func (m *QueryExecuteResultRequest) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

type QueryExecuteResultResponse struct {
	TraceID      string        `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	Status       ExecuteStatus `protobuf:"varint,3,opt,name=status,proto3,enum=engine.ExecuteStatus" json:"status,omitempty"`
	ErrorCode    int32         `protobuf:"varint,4,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ErrorMessage string        `protobuf:"bytes,5,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
}

func (m *QueryExecuteResultResponse) Reset()         { *m = QueryExecuteResultResponse{} }
func (m *QueryExecuteResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecuteResultResponse) ProtoMessage()    {}
func (*QueryExecuteResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{5}
}
func (m *QueryExecuteResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecuteResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecuteResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecuteResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecuteResultResponse.Merge(m, src)
}
func (m *QueryExecuteResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecuteResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecuteResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecuteResultResponse proto.InternalMessageInfo

func (m *QueryExecuteResultResponse) GetTraceID() string {
	if m != nil {
		return m.TraceID
	}
	return ""
}

func (m *QueryExecuteResultResponse) GetStatus() ExecuteStatus {
	if m != nil {
		return m.Status
	}
	return ExecuteStatus_Success
}

func (m *QueryExecuteResultResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QueryExecuteResultResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type QueryRequest struct {
	UID       string             `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	SQL       string             `protobuf:"bytes,2,opt,name=SQL,proto3" json:"SQL,omitempty"`
	Arguments []*common.Argument `protobuf:"bytes,3,rep,name=Arguments,proto3" json:"Arguments,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{6}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *QueryRequest) GetSQL() string {
	if m != nil {
		return m.SQL
	}
	return ""
}

func (m *QueryRequest) GetArguments() []*common.Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type QueryResponse struct {
	Results   []*common.ResultSet `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TookTimes float32             `protobuf:"fixed32,2,opt,name=took_times,json=tookTimes,proto3" json:"took_times,omitempty"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{7}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetResults() []*common.ResultSet {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *QueryResponse) GetTookTimes() float32 {
	if m != nil {
		return m.TookTimes
	}
	return 0
}

type SimpleQueryResponse struct {
	Result []*SimpleQueryResponse_ResultSet `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (m *SimpleQueryResponse) Reset()         { *m = SimpleQueryResponse{} }
func (m *SimpleQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleQueryResponse) ProtoMessage()    {}
func (*SimpleQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{8}
}
func (m *SimpleQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleQueryResponse.Merge(m, src)
}
func (m *SimpleQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimpleQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleQueryResponse proto.InternalMessageInfo

func (m *SimpleQueryResponse) GetResult() []*SimpleQueryResponse_ResultSet {
	if m != nil {
		return m.Result
	}
	return nil
}

type SimpleQueryResponse_ResultSet struct {
	Row map[string]*SimpleQueryResponse_RowValue `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimpleQueryResponse_ResultSet) Reset()         { *m = SimpleQueryResponse_ResultSet{} }
func (m *SimpleQueryResponse_ResultSet) String() string { return proto.CompactTextString(m) }
func (*SimpleQueryResponse_ResultSet) ProtoMessage()    {}
func (*SimpleQueryResponse_ResultSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{8, 0}
}
func (m *SimpleQueryResponse_ResultSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleQueryResponse_ResultSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleQueryResponse_ResultSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleQueryResponse_ResultSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleQueryResponse_ResultSet.Merge(m, src)
}
func (m *SimpleQueryResponse_ResultSet) XXX_Size() int {
	return m.Size()
}
func (m *SimpleQueryResponse_ResultSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleQueryResponse_ResultSet.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleQueryResponse_ResultSet proto.InternalMessageInfo

func (m *SimpleQueryResponse_ResultSet) GetRow() map[string]*SimpleQueryResponse_RowValue {
	if m != nil {
		return m.Row
	}
	return nil
}

type SimpleQueryResponse_RowValue struct {
	Value           string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ColumnValueType common.ColumnValueType `protobuf:"varint,2,opt,name=column_value_type,json=columnValueType,proto3,enum=common.ColumnValueType" json:"column_value_type,omitempty"`
}

func (m *SimpleQueryResponse_RowValue) Reset()         { *m = SimpleQueryResponse_RowValue{} }
func (m *SimpleQueryResponse_RowValue) String() string { return proto.CompactTextString(m) }
func (*SimpleQueryResponse_RowValue) ProtoMessage()    {}
func (*SimpleQueryResponse_RowValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cefbfb4239b527a, []int{8, 1}
}
func (m *SimpleQueryResponse_RowValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleQueryResponse_RowValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleQueryResponse_RowValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleQueryResponse_RowValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleQueryResponse_RowValue.Merge(m, src)
}
func (m *SimpleQueryResponse_RowValue) XXX_Size() int {
	return m.Size()
}
func (m *SimpleQueryResponse_RowValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleQueryResponse_RowValue.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleQueryResponse_RowValue proto.InternalMessageInfo

func (m *SimpleQueryResponse_RowValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SimpleQueryResponse_RowValue) GetColumnValueType() common.ColumnValueType {
	if m != nil {
		return m.ColumnValueType
	}
	return common.ColumnValueType_InvalidColumn
}

func init() {
	proto.RegisterEnum("engine.ExecuteStatus", ExecuteStatus_name, ExecuteStatus_value)
	proto.RegisterType((*ExecuteRequest)(nil), "engine.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "engine.ExecuteResponse")
	proto.RegisterType((*BatchExecuteRequest)(nil), "engine.BatchExecuteRequest")
	proto.RegisterType((*BatchExecuteResponse)(nil), "engine.BatchExecuteResponse")
	proto.RegisterType((*QueryExecuteResultRequest)(nil), "engine.QueryExecuteResultRequest")
	proto.RegisterType((*QueryExecuteResultResponse)(nil), "engine.QueryExecuteResultResponse")
	proto.RegisterType((*QueryRequest)(nil), "engine.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "engine.QueryResponse")
	proto.RegisterType((*SimpleQueryResponse)(nil), "engine.SimpleQueryResponse")
	proto.RegisterType((*SimpleQueryResponse_ResultSet)(nil), "engine.SimpleQueryResponse.ResultSet")
	proto.RegisterMapType((map[string]*SimpleQueryResponse_RowValue)(nil), "engine.SimpleQueryResponse.ResultSet.RowEntry")
	proto.RegisterType((*SimpleQueryResponse_RowValue)(nil), "engine.SimpleQueryResponse.RowValue")
}

func init() { proto.RegisterFile("indexserver/rpc.proto", fileDescriptor_0cefbfb4239b527a) }

var fileDescriptor_0cefbfb4239b527a = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xf3, 0xb3, 0x79, 0x69, 0xbb, 0xe9, 0x6c, 0xba, 0x35, 0xde, 0x6c, 0x54, 0x0c, 0x48,
	0xd5, 0xa2, 0x8d, 0x45, 0xd0, 0x4a, 0x28, 0xd2, 0x4a, 0xb0, 0x69, 0x91, 0x22, 0xed, 0x1e, 0xea,
	0x64, 0x41, 0x62, 0x91, 0x22, 0xd7, 0x19, 0xb9, 0x56, 0x9c, 0x19, 0x77, 0x3c, 0x6e, 0x9a, 0x2b,
	0x17, 0xae, 0x08, 0xfe, 0x08, 0x0e, 0xf0, 0x87, 0x70, 0x5c, 0x89, 0x0b, 0x47, 0xd4, 0x72, 0xe1,
	0xbf, 0x40, 0x9e, 0xf1, 0x24, 0x71, 0x37, 0xe9, 0x72, 0xd9, 0xdb, 0xcc, 0xf7, 0xbe, 0xf7, 0xbd,
	0xe7, 0xcf, 0x6f, 0x66, 0x60, 0xdf, 0x27, 0x63, 0x7c, 0x15, 0x61, 0x76, 0x89, 0x99, 0xc5, 0x42,
	0xb7, 0x1d, 0x32, 0xca, 0x29, 0x2a, 0x63, 0xe2, 0xf9, 0x04, 0x1b, 0x0d, 0x8f, 0x7a, 0x54, 0x40,
	0x56, 0xb2, 0x92, 0x51, 0xa3, 0xe9, 0x51, 0xea, 0x05, 0xd8, 0x72, 0x42, 0xdf, 0x72, 0x08, 0xa1,
	0xdc, 0xe1, 0x3e, 0x25, 0x51, 0x1a, 0x3d, 0x70, 0xe9, 0x74, 0x4a, 0x89, 0x15, 0x5d, 0x04, 0x23,
	0x29, 0x23, 0x03, 0xe6, 0xcf, 0x1a, 0xec, 0x9e, 0x5c, 0x61, 0x37, 0xe6, 0xd8, 0xc6, 0x17, 0x31,
	0x8e, 0x38, 0xaa, 0x43, 0xe1, 0x55, 0xff, 0x58, 0xd7, 0x0e, 0xb5, 0xa3, 0xaa, 0x9d, 0x2c, 0x13,
	0x64, 0x70, 0xfa, 0x42, 0xcf, 0x4b, 0x64, 0x70, 0xfa, 0x02, 0xb5, 0xa1, 0xfa, 0x15, 0xf3, 0xe2,
	0x29, 0x26, 0x3c, 0xd2, 0x0b, 0x87, 0x85, 0xa3, 0x5a, 0xa7, 0xde, 0x96, 0x35, 0xda, 0x2a, 0x60,
	0x2f, 0x29, 0x48, 0x87, 0xca, 0x90, 0x39, 0x2e, 0xee, 0x1f, 0xeb, 0x45, 0xa1, 0xa2, 0xb6, 0x08,
	0x41, 0x71, 0x78, 0xd5, 0x3f, 0xd6, 0x4b, 0x02, 0x16, 0x6b, 0xf3, 0x47, 0x0d, 0xee, 0x2d, 0x9a,
	0x8a, 0x42, 0x4a, 0x22, 0xbc, 0xaa, 0xa0, 0x65, 0x15, 0x74, 0xa8, 0x0c, 0x62, 0xd7, 0xc5, 0x51,
	0x24, 0x3a, 0xdc, 0xb2, 0xd5, 0x16, 0x35, 0xa1, 0x7a, 0xc2, 0x18, 0x65, 0x3d, 0x3a, 0xc6, 0x7a,
	0xe1, 0x50, 0x3b, 0x2a, 0xd9, 0x4b, 0x00, 0x99, 0xb0, 0x2d, 0x36, 0x2f, 0x71, 0x14, 0x39, 0x1e,
	0x4e, 0x1b, 0xcb, 0x60, 0x66, 0x1f, 0xee, 0x3f, 0x77, 0xb8, 0x7b, 0x7e, 0xcb, 0xa2, 0x0e, 0x6c,
	0x31, 0xb9, 0x8c, 0x74, 0x4d, 0x7c, 0xfd, 0x83, 0x76, 0x6a, 0x6b, 0x96, 0x69, 0x2f, 0x78, 0xe6,
	0x4b, 0x68, 0x64, 0xa5, 0xd2, 0x0f, 0x7b, 0x0a, 0x55, 0x96, 0xae, 0x95, 0xd8, 0xc1, 0x5b, 0x62,
	0x32, 0x6e, 0x2f, 0x99, 0xe6, 0x53, 0xf8, 0xe0, 0x34, 0xc6, 0x6c, 0xbe, 0xa4, 0xc4, 0x01, 0x57,
	0xfd, 0x6d, 0x34, 0xcb, 0xfc, 0x55, 0x03, 0x63, 0x5d, 0xde, 0x3b, 0x5d, 0x7e, 0x02, 0xe5, 0x88,
	0x3b, 0x3c, 0x8e, 0x84, 0x91, 0xbb, 0x9d, 0xfd, 0x5b, 0x3d, 0x0e, 0x44, 0xd0, 0x4e, 0x49, 0x59,
	0xeb, 0x8b, 0xef, 0xb2, 0xbe, 0xb4, 0xc6, 0xfa, 0x33, 0xd8, 0x16, 0x8d, 0xbe, 0xc7, 0xb1, 0x34,
	0x5f, 0xc3, 0x4e, 0x5a, 0x23, 0xfd, 0xfe, 0x4f, 0xa1, 0xc2, 0x84, 0x23, 0xea, 0x57, 0xec, 0xa9,
	0x74, 0x69, 0xd4, 0x00, 0x73, 0x5b, 0x31, 0xd0, 0x23, 0x00, 0x4e, 0xe9, 0x64, 0xc4, 0xfd, 0x29,
	0x96, 0xb3, 0x97, 0xb7, 0xab, 0x09, 0x32, 0x4c, 0x00, 0xf3, 0xdf, 0x3c, 0xdc, 0x1f, 0xf8, 0xd3,
	0x30, 0xc0, 0xd9, 0x1a, 0xcf, 0xa0, 0x2c, 0x15, 0xd2, 0x12, 0x9f, 0x28, 0x27, 0xd7, 0x90, 0x57,
	0xca, 0xa6, 0x49, 0xc6, 0x6f, 0x1a, 0x54, 0x17, 0x28, 0xfa, 0x12, 0x0a, 0x8c, 0xce, 0x52, 0xa5,
	0xf6, 0xff, 0x52, 0x6a, 0xdb, 0x74, 0x76, 0x42, 0x38, 0x9b, 0xdb, 0x49, 0xaa, 0xf1, 0x3d, 0x6c,
	0x29, 0x20, 0x71, 0x74, 0x82, 0xe7, 0xca, 0xe3, 0x09, 0x9e, 0xa3, 0x2e, 0x94, 0x2e, 0x9d, 0x20,
	0xc6, 0xe2, 0xf3, 0x6a, 0x9d, 0x8f, 0xef, 0xac, 0x40, 0x67, 0xdf, 0x24, 0x5c, 0x5b, 0xa6, 0x74,
	0xf3, 0x5f, 0x68, 0x06, 0x16, 0xea, 0x02, 0x46, 0x0d, 0xa5, 0x25, 0xf5, 0xe5, 0x06, 0xf5, 0x60,
	0xcf, 0xa5, 0x41, 0x3c, 0x25, 0x23, 0xb1, 0x1f, 0xf1, 0x79, 0x28, 0xab, 0xed, 0x76, 0x0e, 0x94,
	0xf9, 0x3d, 0x41, 0x10, 0x2a, 0xc3, 0x79, 0x88, 0xed, 0x7b, 0x6e, 0x16, 0x78, 0xdc, 0x83, 0x9d,
	0xcc, 0x1c, 0xa2, 0xda, 0xe2, 0x52, 0xa8, 0xe7, 0xd0, 0x0e, 0x54, 0x65, 0xd4, 0x27, 0x5e, 0x5d,
	0x43, 0x00, 0xe5, 0xaf, 0x1d, 0x3f, 0xc0, 0xe3, 0x7a, 0x21, 0x59, 0xbf, 0x22, 0x13, 0x3a, 0x23,
	0xf5, 0x62, 0xe7, 0xf7, 0x02, 0xd4, 0xfa, 0xc9, 0xd5, 0x3b, 0x10, 0x57, 0x2f, 0xea, 0x42, 0x25,
	0x15, 0x45, 0x1b, 0x8e, 0xb7, 0xb1, 0xe9, 0xa4, 0xa2, 0x3e, 0x6c, 0xaf, 0x9e, 0x76, 0xf4, 0x50,
	0x11, 0xd7, 0x5c, 0x27, 0x46, 0x73, 0x7d, 0x30, 0x95, 0x7a, 0x0d, 0xe8, 0xed, 0x13, 0x8b, 0x3e,
	0x54, 0x39, 0x1b, 0x6f, 0x01, 0xc3, 0xbc, 0x8b, 0x92, 0x8a, 0xdb, 0x50, 0x12, 0x51, 0xd4, 0xc8,
	0x90, 0x95, 0xc4, 0xfe, 0x2d, 0x54, 0x66, 0x99, 0xcd, 0x1f, 0xfe, 0xfc, 0xe7, 0x97, 0xfc, 0x03,
	0x73, 0x4f, 0x3c, 0x37, 0x97, 0x9f, 0x25, 0xef, 0x8a, 0x75, 0x91, 0x50, 0xba, 0xda, 0x63, 0x84,
	0xa1, 0xb6, 0x32, 0x1e, 0x1b, 0x94, 0x1f, 0xde, 0x31, 0x49, 0xe6, 0x47, 0x42, 0xff, 0x91, 0xa9,
	0xaf, 0xea, 0x47, 0x82, 0x38, 0x52, 0x65, 0x9e, 0x7f, 0xfb, 0xc7, 0x75, 0x4b, 0x7b, 0x73, 0xdd,
	0xd2, 0xfe, 0xbe, 0x6e, 0x69, 0x3f, 0xdd, 0xb4, 0x72, 0x6f, 0x6e, 0x5a, 0xb9, 0xbf, 0x6e, 0x5a,
	0xb9, 0xef, 0x9e, 0x79, 0x3e, 0x3f, 0x8f, 0xcf, 0x92, 0xe9, 0xb1, 0xbc, 0xc0, 0xe7, 0x1c, 0x33,
	0x82, 0xf9, 0x8c, 0xb2, 0x89, 0xe5, 0x9e, 0x3b, 0x3e, 0x79, 0x32, 0xc6, 0xa1, 0x0a, 0x8c, 0xe4,
	0x4b, 0xba, 0xf2, 0xe4, 0x9e, 0x95, 0x05, 0xf4, 0xf9, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa3,
	0x45, 0xaf, 0x3e, 0x88, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexServerClient is the client API for IndexServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexServerClient interface {
	// Execute 执行SQL语句
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// BatchExecute 批量执行SQL语句
	BatchExecute(ctx context.Context, in *BatchExecuteRequest, opts ...grpc.CallOption) (*BatchExecuteResponse, error)
	// QueryExecuteResult 查询执行结果
	QueryExecuteResult(ctx context.Context, in *QueryExecuteResultRequest, opts ...grpc.CallOption) (*QueryExecuteResultResponse, error)
	// QueryResult
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// SimpleQuery
	SimpleQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*SimpleQueryResponse, error)
}

type indexServerClient struct {
	cc grpc1.ClientConn
}

func NewIndexServerClient(cc grpc1.ClientConn) IndexServerClient {
	return &indexServerClient{cc}
}

func (c *indexServerClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/engine.IndexServer/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServerClient) BatchExecute(ctx context.Context, in *BatchExecuteRequest, opts ...grpc.CallOption) (*BatchExecuteResponse, error) {
	out := new(BatchExecuteResponse)
	err := c.cc.Invoke(ctx, "/engine.IndexServer/BatchExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServerClient) QueryExecuteResult(ctx context.Context, in *QueryExecuteResultRequest, opts ...grpc.CallOption) (*QueryExecuteResultResponse, error) {
	out := new(QueryExecuteResultResponse)
	err := c.cc.Invoke(ctx, "/engine.IndexServer/QueryExecuteResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServerClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/engine.IndexServer/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexServerClient) SimpleQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*SimpleQueryResponse, error) {
	out := new(SimpleQueryResponse)
	err := c.cc.Invoke(ctx, "/engine.IndexServer/SimpleQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServerServer is the server API for IndexServer service.
type IndexServerServer interface {
	// Execute 执行SQL语句
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// BatchExecute 批量执行SQL语句
	BatchExecute(context.Context, *BatchExecuteRequest) (*BatchExecuteResponse, error)
	// QueryExecuteResult 查询执行结果
	QueryExecuteResult(context.Context, *QueryExecuteResultRequest) (*QueryExecuteResultResponse, error)
	// QueryResult
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// SimpleQuery
	SimpleQuery(context.Context, *QueryRequest) (*SimpleQueryResponse, error)
}

// UnimplementedIndexServerServer can be embedded to have forward compatible implementations.
type UnimplementedIndexServerServer struct {
}

func (*UnimplementedIndexServerServer) Execute(ctx context.Context, req *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedIndexServerServer) BatchExecute(ctx context.Context, req *BatchExecuteRequest) (*BatchExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchExecute not implemented")
}
func (*UnimplementedIndexServerServer) QueryExecuteResult(ctx context.Context, req *QueryExecuteResultRequest) (*QueryExecuteResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExecuteResult not implemented")
}
func (*UnimplementedIndexServerServer) Query(ctx context.Context, req *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedIndexServerServer) SimpleQuery(ctx context.Context, req *QueryRequest) (*SimpleQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleQuery not implemented")
}

func RegisterIndexServerServer(s grpc1.Server, srv IndexServerServer) {
	s.RegisterService(&_IndexServer_serviceDesc, srv)
}

func _IndexServer_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServerServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.IndexServer/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServerServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexServer_BatchExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServerServer).BatchExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.IndexServer/BatchExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServerServer).BatchExecute(ctx, req.(*BatchExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexServer_QueryExecuteResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecuteResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServerServer).QueryExecuteResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.IndexServer/QueryExecuteResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServerServer).QueryExecuteResult(ctx, req.(*QueryExecuteResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexServer_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.IndexServer/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServerServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexServer_SimpleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServerServer).SimpleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine.IndexServer/SimpleQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServerServer).SimpleQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndexServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine.IndexServer",
	HandlerType: (*IndexServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _IndexServer_Execute_Handler,
		},
		{
			MethodName: "BatchExecute",
			Handler:    _IndexServer_BatchExecute_Handler,
		},
		{
			MethodName: "QueryExecuteResult",
			Handler:    _IndexServer_QueryExecuteResult_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _IndexServer_Query_Handler,
		},
		{
			MethodName: "SimpleQuery",
			Handler:    _IndexServer_SimpleQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexserver/rpc.proto",
}

func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SQL) > 0 {
		i -= len(m.SQL)
		copy(dAtA[i:], m.SQL)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.SQL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.ErrorCode != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchExecuteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BatchExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecuteResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecuteResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecuteResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecuteResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecuteResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecuteResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TraceID) > 0 {
		i -= len(m.TraceID)
		copy(dAtA[i:], m.TraceID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.TraceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SQL) > 0 {
		i -= len(m.SQL)
		copy(dAtA[i:], m.SQL)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.SQL)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TookTimes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TookTimes))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleQueryResponse_ResultSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleQueryResponse_ResultSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleQueryResponse_ResultSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k := range m.Row {
			v := m.Row[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRpc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleQueryResponse_RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleQueryResponse_RowValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleQueryResponse_RowValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnValueType != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ColumnValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecuteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.SQL)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Success {
		n += 2
	}
	if m.ErrorCode != 0 {
		n += 1 + sovRpc(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *BatchExecuteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *BatchExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *QueryExecuteResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *QueryExecuteResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRpc(uint64(m.Status))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovRpc(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.SQL)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if m.TookTimes != 0 {
		n += 5
	}
	return n
}

func (m *SimpleQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *SimpleQueryResponse_ResultSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k, v := range m.Row {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRpc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRpc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimpleQueryResponse_RowValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ColumnValueType != 0 {
		n += 1 + sovRpc(uint64(m.ColumnValueType))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &common.Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &ExecuteRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &ExecuteResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecuteResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecuteResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecuteResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecuteResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecuteResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecuteResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ExecuteStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &common.Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &common.ResultSet{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TookTimes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TookTimes = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &SimpleQueryResponse_ResultSet{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleQueryResponse_ResultSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = make(map[string]*SimpleQueryResponse_RowValue)
			}
			var mapkey string
			var mapvalue *SimpleQueryResponse_RowValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRpc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRpc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SimpleQueryResponse_RowValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Row[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleQueryResponse_RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValueType", wireType)
			}
			m.ColumnValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnValueType |= common.ColumnValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
