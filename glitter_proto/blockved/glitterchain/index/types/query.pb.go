// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockved/glitterchain/index/query.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	common "github.com/glitternetwork/chain-dep/glitter_proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type SQLQueryRequest struct {
	Sql       string             `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	Arguments []*common.Argument `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *SQLQueryRequest) Reset()         { *m = SQLQueryRequest{} }
func (m *SQLQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SQLQueryRequest) ProtoMessage()    {}
func (*SQLQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{2}
}
func (m *SQLQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQueryRequest.Merge(m, src)
}
func (m *SQLQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQueryRequest proto.InternalMessageInfo

func (m *SQLQueryRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *SQLQueryRequest) GetArguments() []*common.Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SQLQueryResponse struct {
	Results   []*common.ResultSet `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TookTimes float32             `protobuf:"fixed32,2,opt,name=took_times,json=tookTimes,proto3" json:"took_times,omitempty"`
}

func (m *SQLQueryResponse) Reset()         { *m = SQLQueryResponse{} }
func (m *SQLQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SQLQueryResponse) ProtoMessage()    {}
func (*SQLQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{3}
}
func (m *SQLQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLQueryResponse.Merge(m, src)
}
func (m *SQLQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLQueryResponse proto.InternalMessageInfo

func (m *SQLQueryResponse) GetResults() []*common.ResultSet {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SQLQueryResponse) GetTookTimes() float32 {
	if m != nil {
		return m.TookTimes
	}
	return 0
}

type SimpleSQLQueryResponse struct {
	Result []*SimpleSQLQueryResponse_ResultSet `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (m *SimpleSQLQueryResponse) Reset()         { *m = SimpleSQLQueryResponse{} }
func (m *SimpleSQLQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse) ProtoMessage()    {}
func (*SimpleSQLQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{4}
}
func (m *SimpleSQLQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse.Merge(m, src)
}
func (m *SimpleSQLQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse) GetResult() []*SimpleSQLQueryResponse_ResultSet {
	if m != nil {
		return m.Result
	}
	return nil
}

type SimpleSQLQueryResponse_ResultSet struct {
	Row map[string]*SimpleSQLQueryResponse_RowValue `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SimpleSQLQueryResponse_ResultSet) Reset()         { *m = SimpleSQLQueryResponse_ResultSet{} }
func (m *SimpleSQLQueryResponse_ResultSet) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse_ResultSet) ProtoMessage()    {}
func (*SimpleSQLQueryResponse_ResultSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{4, 0}
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.Merge(m, src)
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse_ResultSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse_ResultSet.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse_ResultSet proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse_ResultSet) GetRow() map[string]*SimpleSQLQueryResponse_RowValue {
	if m != nil {
		return m.Row
	}
	return nil
}

type SimpleSQLQueryResponse_RowValue struct {
	Value           string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ColumnValueType common.ColumnValueType `protobuf:"varint,2,opt,name=column_value_type,json=columnValueType,proto3,enum=common.ColumnValueType" json:"column_value_type,omitempty"`
}

func (m *SimpleSQLQueryResponse_RowValue) Reset()         { *m = SimpleSQLQueryResponse_RowValue{} }
func (m *SimpleSQLQueryResponse_RowValue) String() string { return proto.CompactTextString(m) }
func (*SimpleSQLQueryResponse_RowValue) ProtoMessage()    {}
func (*SimpleSQLQueryResponse_RowValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{4, 1}
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSQLQueryResponse_RowValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSQLQueryResponse_RowValue.Merge(m, src)
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSQLQueryResponse_RowValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSQLQueryResponse_RowValue.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSQLQueryResponse_RowValue proto.InternalMessageInfo

func (m *SimpleSQLQueryResponse_RowValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SimpleSQLQueryResponse_RowValue) GetColumnValueType() common.ColumnValueType {
	if m != nil {
		return m.ColumnValueType
	}
	return common.ColumnValueType_InvalidColumn
}

type SQLListTablesRequest struct {
	Keyword  string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Uid      string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Page     int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
}

func (m *SQLListTablesRequest) Reset()         { *m = SQLListTablesRequest{} }
func (m *SQLListTablesRequest) String() string { return proto.CompactTextString(m) }
func (*SQLListTablesRequest) ProtoMessage()    {}
func (*SQLListTablesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{5}
}
func (m *SQLListTablesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListTablesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListTablesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListTablesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListTablesRequest.Merge(m, src)
}
func (m *SQLListTablesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLListTablesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListTablesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListTablesRequest proto.InternalMessageInfo

func (m *SQLListTablesRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SQLListTablesRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SQLListTablesRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SQLListTablesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SQLListTablesRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

type SQLListTablesResponse struct {
	Tables []*common.TableInfo `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (m *SQLListTablesResponse) Reset()         { *m = SQLListTablesResponse{} }
func (m *SQLListTablesResponse) String() string { return proto.CompactTextString(m) }
func (*SQLListTablesResponse) ProtoMessage()    {}
func (*SQLListTablesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{6}
}
func (m *SQLListTablesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListTablesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListTablesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListTablesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListTablesResponse.Merge(m, src)
}
func (m *SQLListTablesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLListTablesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListTablesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListTablesResponse proto.InternalMessageInfo

func (m *SQLListTablesResponse) GetTables() []*common.TableInfo {
	if m != nil {
		return m.Tables
	}
	return nil
}

type SQLListDatabasesRequest struct {
}

func (m *SQLListDatabasesRequest) Reset()         { *m = SQLListDatabasesRequest{} }
func (m *SQLListDatabasesRequest) String() string { return proto.CompactTextString(m) }
func (*SQLListDatabasesRequest) ProtoMessage()    {}
func (*SQLListDatabasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{7}
}
func (m *SQLListDatabasesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListDatabasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListDatabasesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListDatabasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListDatabasesRequest.Merge(m, src)
}
func (m *SQLListDatabasesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLListDatabasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListDatabasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListDatabasesRequest proto.InternalMessageInfo

type SQLListDatabasesResponse struct {
	Databases []*common.DatabaseInfo `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (m *SQLListDatabasesResponse) Reset()         { *m = SQLListDatabasesResponse{} }
func (m *SQLListDatabasesResponse) String() string { return proto.CompactTextString(m) }
func (*SQLListDatabasesResponse) ProtoMessage()    {}
func (*SQLListDatabasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{8}
}
func (m *SQLListDatabasesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLListDatabasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLListDatabasesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLListDatabasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLListDatabasesResponse.Merge(m, src)
}
func (m *SQLListDatabasesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLListDatabasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLListDatabasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLListDatabasesResponse proto.InternalMessageInfo

func (m *SQLListDatabasesResponse) GetDatabases() []*common.DatabaseInfo {
	if m != nil {
		return m.Databases
	}
	return nil
}

type ShowCreateTableRequest struct {
	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName    string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (m *ShowCreateTableRequest) Reset()         { *m = ShowCreateTableRequest{} }
func (m *ShowCreateTableRequest) String() string { return proto.CompactTextString(m) }
func (*ShowCreateTableRequest) ProtoMessage()    {}
func (*ShowCreateTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{9}
}
func (m *ShowCreateTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowCreateTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowCreateTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowCreateTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCreateTableRequest.Merge(m, src)
}
func (m *ShowCreateTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShowCreateTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCreateTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCreateTableRequest proto.InternalMessageInfo

func (m *ShowCreateTableRequest) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *ShowCreateTableRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

type ShowCreateTableResponse struct {
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *ShowCreateTableResponse) Reset()         { *m = ShowCreateTableResponse{} }
func (m *ShowCreateTableResponse) String() string { return proto.CompactTextString(m) }
func (*ShowCreateTableResponse) ProtoMessage()    {}
func (*ShowCreateTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{10}
}
func (m *ShowCreateTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowCreateTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowCreateTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowCreateTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowCreateTableResponse.Merge(m, src)
}
func (m *ShowCreateTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShowCreateTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowCreateTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShowCreateTableResponse proto.InternalMessageInfo

func (m *ShowCreateTableResponse) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

type GetAllHostsRequest struct {
}

func (m *GetAllHostsRequest) Reset()         { *m = GetAllHostsRequest{} }
func (m *GetAllHostsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllHostsRequest) ProtoMessage()    {}
func (*GetAllHostsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{11}
}
func (m *GetAllHostsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllHostsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllHostsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllHostsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllHostsRequest.Merge(m, src)
}
func (m *GetAllHostsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllHostsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllHostsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllHostsRequest proto.InternalMessageInfo

type GetAllHostsResponse struct {
	List []*Host `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *GetAllHostsResponse) Reset()         { *m = GetAllHostsResponse{} }
func (m *GetAllHostsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllHostsResponse) ProtoMessage()    {}
func (*GetAllHostsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9e41ba7f204b1d, []int{12}
}
func (m *GetAllHostsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllHostsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllHostsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllHostsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllHostsResponse.Merge(m, src)
}
func (m *GetAllHostsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllHostsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllHostsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllHostsResponse proto.InternalMessageInfo

func (m *GetAllHostsResponse) GetList() []*Host {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "blockved.glitterchain.index.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "blockved.glitterchain.index.QueryParamsResponse")
	proto.RegisterType((*SQLQueryRequest)(nil), "blockved.glitterchain.index.SQLQueryRequest")
	proto.RegisterType((*SQLQueryResponse)(nil), "blockved.glitterchain.index.SQLQueryResponse")
	proto.RegisterType((*SimpleSQLQueryResponse)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse")
	proto.RegisterType((*SimpleSQLQueryResponse_ResultSet)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet")
	proto.RegisterMapType((map[string]*SimpleSQLQueryResponse_RowValue)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse.ResultSet.RowEntry")
	proto.RegisterType((*SimpleSQLQueryResponse_RowValue)(nil), "blockved.glitterchain.index.SimpleSQLQueryResponse.RowValue")
	proto.RegisterType((*SQLListTablesRequest)(nil), "blockved.glitterchain.index.SQLListTablesRequest")
	proto.RegisterType((*SQLListTablesResponse)(nil), "blockved.glitterchain.index.SQLListTablesResponse")
	proto.RegisterType((*SQLListDatabasesRequest)(nil), "blockved.glitterchain.index.SQLListDatabasesRequest")
	proto.RegisterType((*SQLListDatabasesResponse)(nil), "blockved.glitterchain.index.SQLListDatabasesResponse")
	proto.RegisterType((*ShowCreateTableRequest)(nil), "blockved.glitterchain.index.ShowCreateTableRequest")
	proto.RegisterType((*ShowCreateTableResponse)(nil), "blockved.glitterchain.index.ShowCreateTableResponse")
	proto.RegisterType((*GetAllHostsRequest)(nil), "blockved.glitterchain.index.GetAllHostsRequest")
	proto.RegisterType((*GetAllHostsResponse)(nil), "blockved.glitterchain.index.GetAllHostsResponse")
}

func init() {
	proto.RegisterFile("blockved/glitterchain/index/query.proto", fileDescriptor_ca9e41ba7f204b1d)
}

var fileDescriptor_ca9e41ba7f204b1d = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xe6, 0xc3, 0x8d, 0xdf, 0xd0, 0x26, 0x9d, 0x9a, 0xc4, 0x6c, 0xc1, 0x84, 0x8d, 0x28,
	0x86, 0x34, 0xbb, 0x8d, 0x9b, 0x42, 0x15, 0xc1, 0x21, 0x09, 0x9f, 0x52, 0x54, 0x91, 0x75, 0x40,
	0x15, 0x42, 0xac, 0xd6, 0xf6, 0xb0, 0x5e, 0x79, 0x77, 0xc7, 0xde, 0x19, 0xd7, 0xb8, 0x47, 0xfe,
	0x00, 0x48, 0x5c, 0x10, 0xbf, 0x80, 0x03, 0xdc, 0x38, 0x70, 0xe3, 0xda, 0x63, 0x25, 0x2e, 0x48,
	0x48, 0x08, 0x25, 0xfc, 0x10, 0x34, 0x5f, 0x4e, 0x1c, 0x47, 0xbb, 0x49, 0x7b, 0x49, 0x76, 0xde,
	0x79, 0xde, 0xe7, 0x79, 0x76, 0x3e, 0x9e, 0x35, 0xbc, 0xd1, 0x88, 0x48, 0xb3, 0xf3, 0x08, 0xb7,
	0x9c, 0x20, 0x0a, 0x19, 0xc3, 0x69, 0xb3, 0xed, 0x87, 0x89, 0x13, 0x26, 0x2d, 0xfc, 0x8d, 0xd3,
	0xeb, 0xe3, 0x74, 0x68, 0x77, 0x53, 0xc2, 0x08, 0xba, 0xa9, 0x81, 0xf6, 0x69, 0xa0, 0x2d, 0x80,
	0x66, 0x29, 0x20, 0x01, 0x11, 0x38, 0x87, 0x3f, 0xc9, 0x16, 0xf3, 0xe5, 0x80, 0x90, 0x20, 0xc2,
	0x8e, 0xdf, 0x0d, 0x1d, 0x3f, 0x49, 0x08, 0xf3, 0x59, 0x48, 0x12, 0xaa, 0x66, 0xab, 0x59, 0xca,
	0x5d, 0x3f, 0xf5, 0x63, 0x8d, 0xcc, 0xf4, 0x28, 0xfe, 0x2a, 0xe0, 0xad, 0x2c, 0x60, 0x9b, 0x50,
	0xa6, 0x70, 0x2b, 0x4d, 0x12, 0xc7, 0x24, 0x71, 0x68, 0x2f, 0xf2, 0x70, 0x12, 0x84, 0x09, 0x96,
	0x13, 0x56, 0x09, 0xd0, 0x01, 0x7f, 0xe7, 0x4f, 0x85, 0xbc, 0x8b, 0x7b, 0x7d, 0x4c, 0x99, 0xf5,
	0x10, 0x6e, 0x8c, 0x55, 0x69, 0x97, 0x24, 0x14, 0xa3, 0x1d, 0x28, 0x48, 0x9b, 0x65, 0x63, 0xd5,
	0xa8, 0x2e, 0xd4, 0xd6, 0xec, 0x8c, 0x25, 0xb2, 0x65, 0xf3, 0xee, 0xec, 0x93, 0x7f, 0x5e, 0x9d,
	0x72, 0x55, 0xa3, 0x55, 0x87, 0xc5, 0xfa, 0xc1, 0xbe, 0x20, 0x57, 0x62, 0x68, 0x09, 0x66, 0x68,
	0x2f, 0x12, 0x94, 0x45, 0x97, 0x3f, 0x22, 0x1b, 0x8a, 0x7e, 0x1a, 0xf4, 0x63, 0x9c, 0x30, 0x5a,
	0x9e, 0x5e, 0x9d, 0xa9, 0x2e, 0xd4, 0x96, 0x6c, 0xf9, 0x06, 0xf6, 0x8e, 0x9a, 0x70, 0x4f, 0x20,
	0xd6, 0x57, 0xb0, 0x74, 0x42, 0xaa, 0xbc, 0xae, 0xc3, 0x95, 0x14, 0xd3, 0x7e, 0xc4, 0xb8, 0x59,
	0xce, 0x70, 0x5d, 0x33, 0xb8, 0xa2, 0x5c, 0xc7, 0xcc, 0xd5, 0x08, 0xf4, 0x0a, 0x00, 0x23, 0xa4,
	0xe3, 0xb1, 0x30, 0xc6, 0x5c, 0xd1, 0xa8, 0x4e, 0xbb, 0x45, 0x5e, 0x39, 0xe4, 0x05, 0xeb, 0xb7,
	0x19, 0x58, 0xae, 0x87, 0x71, 0x37, 0xc2, 0x13, 0x32, 0x9f, 0x41, 0x41, 0x92, 0x28, 0x95, 0xf7,
	0x32, 0x97, 0xe4, 0x7c, 0x92, 0x53, 0x8e, 0x14, 0x99, 0xf9, 0xb7, 0x01, 0xc5, 0x51, 0x15, 0x3d,
	0x84, 0x99, 0x94, 0x0c, 0x94, 0xc2, 0x87, 0xcf, 0xa5, 0x60, 0xbb, 0x64, 0xf0, 0x41, 0xc2, 0xd2,
	0xa1, 0xcb, 0x29, 0x4d, 0x06, 0xf3, 0xba, 0xc0, 0xf7, 0xa1, 0x83, 0x87, 0x7a, 0x1f, 0x3a, 0x78,
	0x88, 0x5c, 0x98, 0x7b, 0xe4, 0x47, 0x7d, 0x2c, 0x56, 0x64, 0xa1, 0xf6, 0xee, 0x33, 0x29, 0x93,
	0xc1, 0xe7, 0x9c, 0xc3, 0x95, 0x54, 0xdb, 0xd3, 0xf7, 0x0d, 0x13, 0x0b, 0x55, 0x51, 0x46, 0x25,
	0xad, 0x21, 0x75, 0xe5, 0x00, 0xed, 0xc1, 0xf5, 0x26, 0x89, 0xfa, 0x71, 0xe2, 0x89, 0xb1, 0xc7,
	0x86, 0x5d, 0xe9, 0xe2, 0x5a, 0x6d, 0x45, 0xef, 0xe3, 0x9e, 0x00, 0x08, 0x96, 0xc3, 0x61, 0x17,
	0xbb, 0x8b, 0xcd, 0xf1, 0x82, 0xf5, 0x9d, 0x01, 0xa5, 0xfa, 0xc1, 0xfe, 0x7e, 0x48, 0xd9, 0xa1,
	0xdf, 0x88, 0xb0, 0x3e, 0xde, 0xa8, 0x0c, 0x57, 0x3a, 0x78, 0x38, 0x20, 0x69, 0x4b, 0xa9, 0xea,
	0x21, 0x5f, 0x83, 0x7e, 0xd8, 0x12, 0x4a, 0x45, 0x97, 0x3f, 0x22, 0x04, 0xb3, 0x5d, 0x3f, 0xc0,
	0xe5, 0x99, 0x55, 0xa3, 0x3a, 0xe7, 0x8a, 0x67, 0x74, 0x13, 0x8a, 0xfc, 0xbf, 0x47, 0xc3, 0xc7,
	0xb8, 0x3c, 0x2b, 0x26, 0xe6, 0x79, 0xa1, 0x1e, 0x3e, 0xc6, 0xc8, 0x84, 0xf9, 0x96, 0xcf, 0xfc,
	0x86, 0x4f, 0x71, 0x79, 0x4e, 0xf0, 0x8c, 0xc6, 0xd6, 0x2e, 0xbc, 0x78, 0xc6, 0x90, 0x3a, 0x46,
	0x6f, 0x42, 0x81, 0x89, 0xca, 0xd9, 0xc3, 0x2a, 0x70, 0x9f, 0x24, 0x5f, 0x13, 0x57, 0x01, 0xac,
	0x97, 0x60, 0x45, 0x71, 0xbc, 0xaf, 0x68, 0x47, 0xd7, 0xf6, 0x01, 0x94, 0x27, 0xa7, 0x94, 0x42,
	0x0d, 0x8a, 0xda, 0x86, 0x16, 0x29, 0x69, 0x11, 0x8d, 0x16, 0x3a, 0x27, 0x30, 0xeb, 0x4b, 0x58,
	0xae, 0xb7, 0xc9, 0x60, 0x2f, 0xc5, 0x3e, 0xc3, 0xc2, 0x89, 0x5e, 0xc1, 0x35, 0xb8, 0xaa, 0x61,
	0x5e, 0xe2, 0xc7, 0x7a, 0xf7, 0x5e, 0xd0, 0xc5, 0x07, 0x7e, 0x8c, 0xc5, 0xad, 0xe2, 0x4d, 0x12,
	0x21, 0xd7, 0xb4, 0x28, 0x2a, 0x7c, 0xda, 0xda, 0x84, 0x95, 0x09, 0x76, 0x65, 0x76, 0x19, 0x0a,
	0xb4, 0xd9, 0xc6, 0xb1, 0xaf, 0x78, 0xd5, 0x88, 0xa7, 0xd5, 0x47, 0x98, 0xed, 0x44, 0xd1, 0xc7,
	0x84, 0xb2, 0xd1, 0x6b, 0xef, 0xc3, 0x8d, 0xb1, 0xaa, 0x22, 0xb9, 0x07, 0xb3, 0x51, 0x48, 0xf5,
	0xc5, 0x7c, 0x2d, 0xf3, 0xf0, 0xf2, 0x4e, 0x57, 0xc0, 0x6b, 0x7f, 0x14, 0x61, 0x4e, 0x1c, 0x61,
	0xf4, 0xa3, 0x01, 0x05, 0x19, 0x62, 0xc8, 0xc9, 0xec, 0x9e, 0x4c, 0x50, 0xf3, 0xce, 0xc5, 0x1b,
	0xa4, 0x5d, 0x6b, 0xfd, 0xdb, 0x3f, 0xff, 0xfb, 0x61, 0xfa, 0x75, 0xb4, 0xe6, 0xe4, 0x7f, 0x26,
	0xd0, 0x4f, 0x06, 0xcc, 0xeb, 0xab, 0x86, 0x6e, 0x67, 0xdf, 0xcb, 0xf1, 0xb8, 0x35, 0x37, 0x2e,
	0x88, 0x56, 0xb6, 0x36, 0x85, 0xad, 0x75, 0xeb, 0x56, 0xa6, 0x2d, 0xda, 0x8b, 0xe4, 0xb7, 0x73,
	0xdb, 0x78, 0x0b, 0xfd, 0x6a, 0xc0, 0xb5, 0xf1, 0x34, 0xb8, 0xa4, 0xc5, 0xbb, 0xcf, 0x10, 0x34,
	0xd6, 0x7d, 0x61, 0xb4, 0x66, 0x6d, 0xe4, 0x1a, 0xa5, 0x82, 0xc0, 0x1b, 0xf9, 0xfd, 0xc5, 0x80,
	0xab, 0x63, 0xd7, 0x12, 0x6d, 0xe6, 0xd9, 0x9d, 0xc8, 0x14, 0xb3, 0x76, 0x99, 0x16, 0x65, 0x79,
	0x4b, 0x58, 0xb6, 0xd1, 0xed, 0x5c, 0xcb, 0xfc, 0x64, 0x7a, 0x32, 0x00, 0xd0, 0xef, 0x86, 0xf8,
	0xdc, 0x8d, 0x5d, 0x73, 0xb4, 0x75, 0x11, 0xf9, 0xb3, 0x81, 0x61, 0xde, 0xbb, 0x64, 0x97, 0xf2,
	0xfd, 0x8e, 0xf0, 0xbd, 0x89, 0x9c, 0x8b, 0xf9, 0x1e, 0x05, 0x0a, 0xb7, 0xbe, 0x78, 0xe6, 0xce,
	0xa3, 0x9c, 0xcd, 0x3e, 0x37, 0x7f, 0xcc, 0xad, 0xcb, 0x35, 0x29, 0xdf, 0xdb, 0xc2, 0xf7, 0x16,
	0xaa, 0xe5, 0x1f, 0x91, 0x36, 0x19, 0x78, 0x4d, 0x41, 0x21, 0x97, 0x1d, 0xfd, 0x6c, 0xc0, 0xc2,
	0xa9, 0x94, 0xc9, 0x49, 0x84, 0xc9, 0x94, 0xca, 0x49, 0x84, 0x73, 0x02, 0xcc, 0x7a, 0x5b, 0xd8,
	0xbd, 0x83, 0xec, 0x5c, 0xbb, 0x01, 0x66, 0x9e, 0x1f, 0x45, 0x1e, 0xff, 0xc5, 0x47, 0x77, 0xe3,
	0x27, 0x47, 0x15, 0xe3, 0xe9, 0x51, 0xc5, 0xf8, 0xf7, 0xa8, 0x62, 0x7c, 0x7f, 0x5c, 0x99, 0x7a,
	0x7a, 0x5c, 0x99, 0xfa, 0xeb, 0xb8, 0x32, 0xf5, 0x45, 0x3d, 0x08, 0x59, 0xbb, 0xdf, 0xe0, 0xb9,
	0xaf, 0xa9, 0x12, 0xcc, 0x06, 0x24, 0xed, 0x38, 0x82, 0x72, 0xa3, 0x85, 0xbb, 0x7a, 0xc2, 0x93,
	0xbf, 0x6e, 0xb3, 0xa4, 0xf9, 0x57, 0x99, 0x36, 0x0a, 0x02, 0x78, 0xf7, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa7, 0x17, 0x92, 0x6b, 0x59, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// SQLQuery do queries
	SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResponse, error)
	// SimpleSQLQuery do queries
	SimpleSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SimpleSQLQueryResponse, error)
	// Parameters queries the parameters of the module.
	SQLListTables(ctx context.Context, in *SQLListTablesRequest, opts ...grpc.CallOption) (*SQLListTablesResponse, error)
	SQLListDatabases(ctx context.Context, in *SQLListDatabasesRequest, opts ...grpc.CallOption) (*SQLListDatabasesResponse, error)
	ShowCreateTable(ctx context.Context, in *ShowCreateTableRequest, opts ...grpc.CallOption) (*ShowCreateTableResponse, error)
	// Parameters queries the parameters of the module.
	GetAllHosts(ctx context.Context, in *GetAllHostsRequest, opts ...grpc.CallOption) (*GetAllHostsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SQLQueryResponse, error) {
	out := new(SQLQueryResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimpleSQLQuery(ctx context.Context, in *SQLQueryRequest, opts ...grpc.CallOption) (*SimpleSQLQueryResponse, error) {
	out := new(SimpleSQLQueryResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SimpleSQLQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SQLListTables(ctx context.Context, in *SQLListTablesRequest, opts ...grpc.CallOption) (*SQLListTablesResponse, error) {
	out := new(SQLListTablesResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SQLListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SQLListDatabases(ctx context.Context, in *SQLListDatabasesRequest, opts ...grpc.CallOption) (*SQLListDatabasesResponse, error) {
	out := new(SQLListDatabasesResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/SQLListDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowCreateTable(ctx context.Context, in *ShowCreateTableRequest, opts ...grpc.CallOption) (*ShowCreateTableResponse, error) {
	out := new(ShowCreateTableResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/ShowCreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllHosts(ctx context.Context, in *GetAllHostsRequest, opts ...grpc.CallOption) (*GetAllHostsResponse, error) {
	out := new(GetAllHostsResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Query/GetAllHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// SQLQuery do queries
	SQLQuery(context.Context, *SQLQueryRequest) (*SQLQueryResponse, error)
	// SimpleSQLQuery do queries
	SimpleSQLQuery(context.Context, *SQLQueryRequest) (*SimpleSQLQueryResponse, error)
	// Parameters queries the parameters of the module.
	SQLListTables(context.Context, *SQLListTablesRequest) (*SQLListTablesResponse, error)
	SQLListDatabases(context.Context, *SQLListDatabasesRequest) (*SQLListDatabasesResponse, error)
	ShowCreateTable(context.Context, *ShowCreateTableRequest) (*ShowCreateTableResponse, error)
	// Parameters queries the parameters of the module.
	GetAllHosts(context.Context, *GetAllHostsRequest) (*GetAllHostsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SQLQuery(ctx context.Context, req *SQLQueryRequest) (*SQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLQuery not implemented")
}
func (*UnimplementedQueryServer) SimpleSQLQuery(ctx context.Context, req *SQLQueryRequest) (*SimpleSQLQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleSQLQuery not implemented")
}
func (*UnimplementedQueryServer) SQLListTables(ctx context.Context, req *SQLListTablesRequest) (*SQLListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLListTables not implemented")
}
func (*UnimplementedQueryServer) SQLListDatabases(ctx context.Context, req *SQLListDatabasesRequest) (*SQLListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLListDatabases not implemented")
}
func (*UnimplementedQueryServer) ShowCreateTable(ctx context.Context, req *ShowCreateTableRequest) (*ShowCreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCreateTable not implemented")
}
func (*UnimplementedQueryServer) GetAllHosts(ctx context.Context, req *GetAllHostsRequest) (*GetAllHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHosts not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimpleSQLQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimpleSQLQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SimpleSQLQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimpleSQLQuery(ctx, req.(*SQLQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SQLListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SQLListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SQLListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SQLListTables(ctx, req.(*SQLListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SQLListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SQLListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/SQLListDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SQLListDatabases(ctx, req.(*SQLListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowCreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowCreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/ShowCreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowCreateTable(ctx, req.(*ShowCreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Query/GetAllHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllHosts(ctx, req.(*GetAllHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockved.glitterchain.index.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SQLQuery",
			Handler:    _Query_SQLQuery_Handler,
		},
		{
			MethodName: "SimpleSQLQuery",
			Handler:    _Query_SimpleSQLQuery_Handler,
		},
		{
			MethodName: "SQLListTables",
			Handler:    _Query_SQLListTables_Handler,
		},
		{
			MethodName: "SQLListDatabases",
			Handler:    _Query_SQLListDatabases_Handler,
		},
		{
			MethodName: "ShowCreateTable",
			Handler:    _Query_ShowCreateTable_Handler,
		},
		{
			MethodName: "GetAllHosts",
			Handler:    _Query_GetAllHosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockved/glitterchain/index/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SQLQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TookTimes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TookTimes))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse_ResultSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse_ResultSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse_ResultSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k := range m.Row {
			v := m.Row[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSQLQueryResponse_RowValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSQLQueryResponse_RowValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSQLQueryResponse_RowValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ColumnValueType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ColumnValueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLListTablesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListTablesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListTablesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PageSize != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLListTablesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListTablesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListTablesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SQLListDatabasesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListDatabasesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListDatabasesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SQLListDatabasesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLListDatabasesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLListDatabasesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for iNdEx := len(m.Databases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Databases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShowCreateTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowCreateTableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowCreateTableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatabaseName) > 0 {
		i -= len(m.DatabaseName)
		copy(dAtA[i:], m.DatabaseName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DatabaseName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShowCreateTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowCreateTableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowCreateTableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllHostsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllHostsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllHostsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllHostsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllHostsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllHostsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SQLQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SQLQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TookTimes != 0 {
		n += 5
	}
	return n
}

func (m *SimpleSQLQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SimpleSQLQueryResponse_ResultSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Row) > 0 {
		for k, v := range m.Row {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SimpleSQLQueryResponse_RowValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ColumnValueType != 0 {
		n += 1 + sovQuery(uint64(m.ColumnValueType))
	}
	return n
}

func (m *SQLListTablesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovQuery(uint64(m.PageSize))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SQLListTablesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SQLListDatabasesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SQLListDatabasesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Databases) > 0 {
		for _, e := range m.Databases {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ShowCreateTableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatabaseName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ShowCreateTableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAllHostsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllHostsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &common.Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &common.ResultSet{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TookTimes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TookTimes = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleSQLQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleSQLQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &SimpleSQLQueryResponse_ResultSet{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse_ResultSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = make(map[string]*SimpleSQLQueryResponse_RowValue)
			}
			var mapkey string
			var mapvalue *SimpleSQLQueryResponse_RowValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SimpleSQLQueryResponse_RowValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Row[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSQLQueryResponse_RowValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnValueType", wireType)
			}
			m.ColumnValueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnValueType |= common.ColumnValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListTablesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListTablesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, &common.TableInfo{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListDatabasesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListDatabasesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListDatabasesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLListDatabasesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLListDatabasesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLListDatabasesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Databases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Databases = append(m.Databases, &common.DatabaseInfo{})
			if err := m.Databases[len(m.Databases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowCreateTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowCreateTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowCreateTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowCreateTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowCreateTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowCreateTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllHostsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllHostsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllHostsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllHostsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllHostsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllHostsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Host{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
