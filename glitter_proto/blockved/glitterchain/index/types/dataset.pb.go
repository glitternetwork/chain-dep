// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockved/glitterchain/index/dataset.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceStatus int32

const (
	unset  ServiceStatus = 0
	start  ServiceStatus = 1
	stop   ServiceStatus = 2
	delete ServiceStatus = 3
)

var ServiceStatus_name = map[int32]string{
	0: "Service_Status_Unset",
	1: "Service_Status_Start",
	2: "Service_Status_Stop",
	3: "Service_Status_Delete",
}

var ServiceStatus_value = map[string]int32{
	"Service_Status_Unset":  0,
	"Service_Status_Start":  1,
	"Service_Status_Stop":   2,
	"Service_Status_Delete": 3,
}

func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}

func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_30db0b27d43e4978, []int{0}
}

type Table struct {
	TableName  string    `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Meta       string    `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	UpdateTime time.Time `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3,stdtime" json:"update_time" yaml:"update_time"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}
func (*Table) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db0b27d43e4978, []int{0}
}
func (m *Table) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Table) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Table.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Table) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Table.Merge(m, src)
}
func (m *Table) XXX_Size() int {
	return m.Size()
}
func (m *Table) XXX_DiscardUnknown() {
	xxx_messageInfo_Table.DiscardUnknown(m)
}

var xxx_messageInfo_Table proto.InternalMessageInfo

func (m *Table) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Table) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Table) GetUpdateTime() time.Time {
	if m != nil {
		return m.UpdateTime
	}
	return time.Time{}
}

// consumer pledge dataset token
type CPDT struct {
	DatasetName     string                                 `protobuf:"bytes,1,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	ConsumerAddress string                                 `protobuf:"bytes,2,opt,name=consumer_address,json=consumerAddress,proto3" json:"consumer_address,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *CPDT) Reset()         { *m = CPDT{} }
func (m *CPDT) String() string { return proto.CompactTextString(m) }
func (*CPDT) ProtoMessage()    {}
func (*CPDT) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db0b27d43e4978, []int{1}
}
func (m *CPDT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPDT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPDT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPDT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPDT.Merge(m, src)
}
func (m *CPDT) XXX_Size() int {
	return m.Size()
}
func (m *CPDT) XXX_DiscardUnknown() {
	xxx_messageInfo_CPDT.DiscardUnknown(m)
}

var xxx_messageInfo_CPDT proto.InternalMessageInfo

func (m *CPDT) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *CPDT) GetConsumerAddress() string {
	if m != nil {
		return m.ConsumerAddress
	}
	return ""
}

type Dataset struct {
	DatasetName     string                                 `protobuf:"bytes,1,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	WorkStatus      ServiceStatus                          `protobuf:"varint,2,opt,name=work_status,json=workStatus,proto3,enum=blockved.glitterchain.index.ServiceStatus" json:"work_status,omitempty"`
	OwnerAddress    string                                 `protobuf:"bytes,3,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	ExpirationTime  time.Time                              `protobuf:"bytes,4,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time"`
	Hosts           string                                 `protobuf:"bytes,5,opt,name=hosts,proto3" json:"hosts,omitempty"`
	ManageAddresses string                                 `protobuf:"bytes,6,opt,name=manage_addresses,json=manageAddresses,proto3" json:"manage_addresses,omitempty"`
	Tables          []Table                                `protobuf:"bytes,7,rep,name=tables,proto3" json:"tables"`
	SumCPDT         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=sum_cpdt,json=sumCpdt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sum_cpdt"`
	Meta            string                                 `protobuf:"bytes,9,opt,name=meta,proto3" json:"meta,omitempty"`
	Description     string                                 `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	UpdateTime      time.Time                              `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3,stdtime" json:"update_time" yaml:"update_time"`
}

func (m *Dataset) Reset()         { *m = Dataset{} }
func (m *Dataset) String() string { return proto.CompactTextString(m) }
func (*Dataset) ProtoMessage()    {}
func (*Dataset) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db0b27d43e4978, []int{2}
}
func (m *Dataset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dataset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dataset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dataset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dataset.Merge(m, src)
}
func (m *Dataset) XXX_Size() int {
	return m.Size()
}
func (m *Dataset) XXX_DiscardUnknown() {
	xxx_messageInfo_Dataset.DiscardUnknown(m)
}

var xxx_messageInfo_Dataset proto.InternalMessageInfo

func (m *Dataset) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *Dataset) GetWorkStatus() ServiceStatus {
	if m != nil {
		return m.WorkStatus
	}
	return unset
}

func (m *Dataset) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *Dataset) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

func (m *Dataset) GetHosts() string {
	if m != nil {
		return m.Hosts
	}
	return ""
}

func (m *Dataset) GetManageAddresses() string {
	if m != nil {
		return m.ManageAddresses
	}
	return ""
}

func (m *Dataset) GetTables() []Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

func (m *Dataset) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Dataset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dataset) GetUpdateTime() time.Time {
	if m != nil {
		return m.UpdateTime
	}
	return time.Time{}
}

type DatasetExpiration struct {
	DatasetNames   []string  `protobuf:"bytes,1,rep,name=dataset_names,json=datasetNames,proto3" json:"dataset_names,omitempty" yaml:"dataset_name"`
	ExpirationTime time.Time `protobuf:"bytes,11,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time" yaml:"expiration_time"`
}

func (m *DatasetExpiration) Reset()         { *m = DatasetExpiration{} }
func (m *DatasetExpiration) String() string { return proto.CompactTextString(m) }
func (*DatasetExpiration) ProtoMessage()    {}
func (*DatasetExpiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_30db0b27d43e4978, []int{3}
}
func (m *DatasetExpiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasetExpiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatasetExpiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatasetExpiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasetExpiration.Merge(m, src)
}
func (m *DatasetExpiration) XXX_Size() int {
	return m.Size()
}
func (m *DatasetExpiration) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasetExpiration.DiscardUnknown(m)
}

var xxx_messageInfo_DatasetExpiration proto.InternalMessageInfo

func (m *DatasetExpiration) GetDatasetNames() []string {
	if m != nil {
		return m.DatasetNames
	}
	return nil
}

func (m *DatasetExpiration) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("blockved.glitterchain.index.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
	proto.RegisterType((*Table)(nil), "blockved.glitterchain.index.Table")
	proto.RegisterType((*CPDT)(nil), "blockved.glitterchain.index.CPDT")
	proto.RegisterType((*Dataset)(nil), "blockved.glitterchain.index.Dataset")
	proto.RegisterType((*DatasetExpiration)(nil), "blockved.glitterchain.index.DatasetExpiration")
}

func init() {
	proto.RegisterFile("blockved/glitterchain/index/dataset.proto", fileDescriptor_30db0b27d43e4978)
}

var fileDescriptor_30db0b27d43e4978 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x15, 0xad, 0xf7, 0xc8, 0x0f, 0x75, 0xec, 0xb6, 0xb4, 0x8a, 0x92, 0x34, 0x8d, 0x16, 0xb2,
	0x01, 0x93, 0x80, 0xbb, 0x6a, 0xd1, 0x45, 0x2d, 0xbb, 0x05, 0x8a, 0x20, 0x41, 0x40, 0x29, 0x9b,
	0x64, 0x41, 0x8c, 0xc8, 0x09, 0x4d, 0x58, 0xe4, 0x10, 0x9c, 0xa1, 0x1f, 0x7f, 0x10, 0x78, 0xe5,
	0x5d, 0x56, 0xde, 0x24, 0xab, 0xfc, 0x42, 0xbe, 0xc0, 0x4b, 0x2f, 0x93, 0x2c, 0x94, 0x40, 0xfe,
	0x03, 0x7f, 0x41, 0xc0, 0x19, 0xd2, 0x66, 0x64, 0xc3, 0x4e, 0x80, 0xac, 0x34, 0xf7, 0xdc, 0x73,
	0x67, 0xce, 0x9d, 0x7b, 0x46, 0x04, 0x6b, 0xc3, 0x11, 0x71, 0xf6, 0xf6, 0xb1, 0x6b, 0x7a, 0x23,
	0x9f, 0x31, 0x1c, 0x3b, 0xbb, 0xc8, 0x0f, 0x4d, 0x3f, 0x74, 0xf1, 0xa1, 0xe9, 0x22, 0x86, 0x28,
	0x66, 0x46, 0x14, 0x13, 0x46, 0xe0, 0x2f, 0x39, 0xd5, 0x28, 0x52, 0x0d, 0x4e, 0xed, 0x2c, 0x3b,
	0x84, 0x06, 0x84, 0xda, 0x9c, 0x6a, 0x8a, 0x40, 0xd4, 0x75, 0x96, 0x3c, 0xe2, 0x11, 0x81, 0xa7,
	0xab, 0x0c, 0x5d, 0xf6, 0x08, 0xf1, 0x46, 0xd8, 0xe4, 0xd1, 0x30, 0x79, 0x6e, 0xa2, 0xf0, 0x28,
	0x4b, 0xa9, 0xd3, 0x29, 0xe6, 0x07, 0x98, 0x32, 0x14, 0x44, 0x82, 0xa0, 0xbf, 0x94, 0x40, 0x75,
	0x80, 0x86, 0x23, 0x0c, 0x7f, 0x05, 0x80, 0xa5, 0x0b, 0x3b, 0x44, 0x01, 0x96, 0x25, 0x4d, 0xea,
	0x36, 0xad, 0x26, 0x47, 0x1e, 0xa1, 0x00, 0x43, 0x08, 0x2a, 0x01, 0x66, 0x48, 0x9e, 0xe1, 0x09,
	0xbe, 0x86, 0xcf, 0x40, 0x2b, 0x89, 0x5c, 0xc4, 0xb0, 0x9d, 0x6e, 0x2b, 0x97, 0x35, 0xa9, 0xdb,
	0xda, 0xec, 0x18, 0xe2, 0x4c, 0x23, 0x3f, 0xd3, 0x18, 0xe4, 0x67, 0xf6, 0x94, 0xb3, 0xb1, 0x5a,
	0xba, 0x1c, 0xab, 0xf0, 0x08, 0x05, 0xa3, 0xbf, 0xf4, 0x42, 0xb1, 0x7e, 0xf2, 0x51, 0x95, 0x2c,
	0x20, 0x90, 0xb4, 0x40, 0x7f, 0x25, 0x81, 0xca, 0xf6, 0xe3, 0x9d, 0x01, 0x5c, 0x01, 0xb3, 0xd9,
	0xed, 0x15, 0xa5, 0xb5, 0x32, 0x8c, 0x8b, 0x33, 0x41, 0xdb, 0x21, 0x21, 0x4d, 0x02, 0x1c, 0xdb,
	0xc8, 0x75, 0x63, 0x4c, 0xa9, 0x10, 0xda, 0xab, 0x9c, 0x8d, 0x55, 0xc9, 0x5a, 0xc8, 0xb3, 0x5b,
	0x22, 0x09, 0xff, 0x03, 0x35, 0x14, 0x90, 0x24, 0x64, 0x5c, 0x74, 0xb3, 0x67, 0xa4, 0xc2, 0x3e,
	0x8c, 0xd5, 0xdf, 0x3d, 0x9f, 0xed, 0x26, 0x43, 0xc3, 0x21, 0x41, 0x76, 0xf3, 0xd9, 0xcf, 0x06,
	0x75, 0xf7, 0x4c, 0x76, 0x14, 0x61, 0x6a, 0xfc, 0x1f, 0x32, 0x2b, 0xab, 0xd6, 0xdf, 0x57, 0x40,
	0x7d, 0x47, 0x08, 0xf9, 0x1a, 0x9d, 0x0f, 0x40, 0xeb, 0x80, 0xc4, 0x7b, 0x36, 0x65, 0x88, 0x25,
	0x42, 0xe2, 0xfc, 0xe6, 0xba, 0x71, 0x87, 0x1b, 0x8c, 0x3e, 0x8e, 0xf7, 0x7d, 0x07, 0xf7, 0x79,
	0x85, 0x05, 0xd2, 0x72, 0xb1, 0x86, 0xab, 0x60, 0x8e, 0x1c, 0x84, 0x85, 0x8e, 0x79, 0x2b, 0xd6,
	0x2c, 0x07, 0xf3, 0x46, 0x1f, 0x82, 0x05, 0x7c, 0x18, 0xf9, 0x31, 0x62, 0x3e, 0x09, 0xc5, 0x98,
	0x2a, 0xf7, 0x8e, 0xa9, 0x91, 0xde, 0x06, 0x1f, 0xc8, 0xfc, 0x75, 0x71, 0x9a, 0x86, 0x4b, 0xa0,
	0xba, 0x4b, 0x28, 0xa3, 0x72, 0x95, 0x9f, 0x25, 0x02, 0xb8, 0x06, 0xda, 0x01, 0x0a, 0x91, 0x87,
	0x73, 0x29, 0x98, 0xca, 0x35, 0x4e, 0x58, 0x10, 0xf8, 0x56, 0x0e, 0xc3, 0x7f, 0x40, 0x8d, 0x7b,
	0x8a, 0xca, 0x75, 0xad, 0xdc, 0x6d, 0x6d, 0xea, 0x77, 0x36, 0xcf, 0x9d, 0xc9, 0x67, 0x58, 0xb2,
	0xb2, 0x3a, 0x38, 0x00, 0x0d, 0x9a, 0x04, 0xb6, 0x13, 0xb9, 0x4c, 0x6e, 0xf0, 0xe1, 0xfd, 0xf9,
	0x6d, 0xc3, 0x9b, 0x8c, 0xd5, 0x7a, 0x3f, 0x09, 0x52, 0x6f, 0x59, 0x75, 0x9a, 0x04, 0xdb, 0x91,
	0xcb, 0xae, 0xec, 0xdd, 0x2c, 0xd8, 0x5b, 0x03, 0x2d, 0x17, 0x53, 0x27, 0xf6, 0xa3, 0xb4, 0x7f,
	0x19, 0x64, 0xf3, 0xbc, 0x86, 0xa6, 0x1f, 0x40, 0xeb, 0xbb, 0x3e, 0x80, 0xb7, 0x12, 0xf8, 0x21,
	0xf3, 0xd6, 0xbf, 0x57, 0x53, 0x80, 0x7f, 0x83, 0xb9, 0xa2, 0xcb, 0xa8, 0x2c, 0x69, 0xe5, 0x6e,
	0xb3, 0xf7, 0xf3, 0xe5, 0x58, 0x5d, 0x14, 0x9b, 0x16, 0xd3, 0xba, 0x35, 0x5b, 0xf0, 0x1f, 0x85,
	0xde, 0x4d, 0x3b, 0xdc, 0x2f, 0x5a, 0xcf, 0x44, 0xff, 0x24, 0xf6, 0x9f, 0xda, 0x40, 0xbf, 0xcd,
	0x28, 0xeb, 0x6f, 0x24, 0x30, 0xf7, 0x85, 0x75, 0xe1, 0x2a, 0x58, 0xca, 0x00, 0x5b, 0x20, 0xf6,
	0x93, 0x90, 0x62, 0xd6, 0x2e, 0x75, 0x9a, 0xc7, 0xa7, 0x5a, 0x35, 0x49, 0x83, 0x5b, 0x48, 0x7d,
	0x86, 0x62, 0xd6, 0x96, 0x04, 0x89, 0xa6, 0x01, 0x5c, 0x01, 0x8b, 0x37, 0x48, 0x24, 0x6a, 0xcf,
	0x74, 0x1a, 0xc7, 0xa7, 0x5a, 0x85, 0x32, 0x12, 0xc1, 0xdf, 0xc0, 0x8f, 0x53, 0x94, 0x1d, 0x3c,
	0xc2, 0x0c, 0xb7, 0xcb, 0x1d, 0x70, 0x7c, 0xaa, 0xd5, 0x5c, 0x1e, 0x75, 0x2a, 0x2f, 0x5e, 0x2b,
	0xa5, 0x5e, 0x70, 0x36, 0x51, 0xa4, 0xf3, 0x89, 0x22, 0x7d, 0x9a, 0x28, 0xd2, 0xc9, 0x85, 0x52,
	0x3a, 0xbf, 0x50, 0x4a, 0xef, 0x2e, 0x94, 0xd2, 0xd3, 0x7e, 0xc1, 0x51, 0x99, 0x3d, 0x43, 0xcc,
	0xd2, 0x37, 0x68, 0x72, 0x9b, 0x6e, 0xb8, 0x38, 0xca, 0x13, 0xd9, 0xff, 0xf5, 0x5d, 0x1f, 0x01,
	0x6e, 0xc1, 0x61, 0x8d, 0x13, 0xff, 0xf8, 0x1c, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x98, 0x5a, 0xc7,
	0x30, 0x06, 0x00, 0x00,
}

func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Table) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDataset(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPDT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPDT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPDT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDataset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ConsumerAddress) > 0 {
		i -= len(m.ConsumerAddress)
		copy(dAtA[i:], m.ConsumerAddress)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.ConsumerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dataset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dataset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dataset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintDataset(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.SumCPDT.Size()
		i -= size
		if _, err := m.SumCPDT.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDataset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tables[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ManageAddresses) > 0 {
		i -= len(m.ManageAddresses)
		copy(dAtA[i:], m.ManageAddresses)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.ManageAddresses)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hosts) > 0 {
		i -= len(m.Hosts)
		copy(dAtA[i:], m.Hosts)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.Hosts)))
		i--
		dAtA[i] = 0x2a
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintDataset(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkStatus != 0 {
		i = encodeVarintDataset(dAtA, i, uint64(m.WorkStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatasetExpiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasetExpiration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasetExpiration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDataset(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x5a
	if len(m.DatasetNames) > 0 {
		for iNdEx := len(m.DatasetNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DatasetNames[iNdEx])
			copy(dAtA[i:], m.DatasetNames[iNdEx])
			i = encodeVarintDataset(dAtA, i, uint64(len(m.DatasetNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataset(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Table) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime)
	n += 1 + l + sovDataset(uint64(l))
	return n
}

func (m *CPDT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.ConsumerAddress)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDataset(uint64(l))
	return n
}

func (m *Dataset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if m.WorkStatus != 0 {
		n += 1 + sovDataset(uint64(m.WorkStatus))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovDataset(uint64(l))
	l = len(m.Hosts)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.ManageAddresses)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	if len(m.Tables) > 0 {
		for _, e := range m.Tables {
			l = e.Size()
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	l = m.SumCPDT.Size()
	n += 1 + l + sovDataset(uint64(l))
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDataset(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime)
	n += 1 + l + sovDataset(uint64(l))
	return n
}

func (m *DatasetExpiration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DatasetNames) > 0 {
		for _, s := range m.DatasetNames {
			l = len(s)
			n += 1 + l + sovDataset(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovDataset(uint64(l))
	return n
}

func sovDataset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataset(x uint64) (n int) {
	return sovDataset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPDT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPDT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPDT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dataset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dataset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dataset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkStatus", wireType)
			}
			m.WorkStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkStatus |= ServiceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManageAddresses = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, Table{})
			if err := m.Tables[len(m.Tables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumCPDT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SumCPDT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatasetExpiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasetExpiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasetExpiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetNames = append(m.DatasetNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataset = fmt.Errorf("proto: unexpected end of group")
)
