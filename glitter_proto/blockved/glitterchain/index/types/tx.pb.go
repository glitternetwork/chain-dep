// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockved/glitterchain/index/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/glitternetwork/chain-dep/glitter_proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EditTableRequest struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	DatasetName string `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	TableName   string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Meta        string `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *EditTableRequest) Reset()         { *m = EditTableRequest{} }
func (m *EditTableRequest) String() string { return proto.CompactTextString(m) }
func (*EditTableRequest) ProtoMessage()    {}
func (*EditTableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{0}
}
func (m *EditTableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditTableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditTableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditTableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditTableRequest.Merge(m, src)
}
func (m *EditTableRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditTableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditTableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditTableRequest proto.InternalMessageInfo

func (m *EditTableRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *EditTableRequest) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *EditTableRequest) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *EditTableRequest) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

type EditTableResponse struct {
}

func (m *EditTableResponse) Reset()         { *m = EditTableResponse{} }
func (m *EditTableResponse) String() string { return proto.CompactTextString(m) }
func (*EditTableResponse) ProtoMessage()    {}
func (*EditTableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{1}
}
func (m *EditTableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditTableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditTableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditTableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditTableResponse.Merge(m, src)
}
func (m *EditTableResponse) XXX_Size() int {
	return m.Size()
}
func (m *EditTableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditTableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditTableResponse proto.InternalMessageInfo

type CreateDatasetRequest struct {
	FromAddress     string        `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	DatasetName     string        `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	WorkStatus      ServiceStatus `protobuf:"varint,3,opt,name=work_status,json=workStatus,proto3,enum=blockved.glitterchain.index.ServiceStatus" json:"work_status,omitempty"`
	Hosts           string        `protobuf:"bytes,4,opt,name=hosts,proto3" json:"hosts,omitempty"`
	ManageAddresses string        `protobuf:"bytes,5,opt,name=manage_addresses,json=manageAddresses,proto3" json:"manage_addresses,omitempty"`
	Meta            string        `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	Description     string        `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Duration        int64         `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *CreateDatasetRequest) Reset()         { *m = CreateDatasetRequest{} }
func (m *CreateDatasetRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDatasetRequest) ProtoMessage()    {}
func (*CreateDatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{2}
}
func (m *CreateDatasetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDatasetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatasetRequest.Merge(m, src)
}
func (m *CreateDatasetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateDatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatasetRequest proto.InternalMessageInfo

func (m *CreateDatasetRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *CreateDatasetRequest) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *CreateDatasetRequest) GetWorkStatus() ServiceStatus {
	if m != nil {
		return m.WorkStatus
	}
	return unset
}

func (m *CreateDatasetRequest) GetHosts() string {
	if m != nil {
		return m.Hosts
	}
	return ""
}

func (m *CreateDatasetRequest) GetManageAddresses() string {
	if m != nil {
		return m.ManageAddresses
	}
	return ""
}

func (m *CreateDatasetRequest) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *CreateDatasetRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateDatasetRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type CreateDatasetResponse struct {
	ExpirationTime time.Time `protobuf:"bytes,1,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time"`
}

func (m *CreateDatasetResponse) Reset()         { *m = CreateDatasetResponse{} }
func (m *CreateDatasetResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDatasetResponse) ProtoMessage()    {}
func (*CreateDatasetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{3}
}
func (m *CreateDatasetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDatasetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDatasetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDatasetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatasetResponse.Merge(m, src)
}
func (m *CreateDatasetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateDatasetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatasetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatasetResponse proto.InternalMessageInfo

func (m *CreateDatasetResponse) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

type EditDatasetRequest struct {
	FromAddress     string        `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	DatasetName     string        `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	WorkStatus      ServiceStatus `protobuf:"varint,3,opt,name=work_status,json=workStatus,proto3,enum=blockved.glitterchain.index.ServiceStatus" json:"work_status,omitempty"`
	Hosts           string        `protobuf:"bytes,4,opt,name=hosts,proto3" json:"hosts,omitempty"`
	ManageAddresses string        `protobuf:"bytes,5,opt,name=manage_addresses,json=manageAddresses,proto3" json:"manage_addresses,omitempty"`
	Meta            string        `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	Description     string        `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *EditDatasetRequest) Reset()         { *m = EditDatasetRequest{} }
func (m *EditDatasetRequest) String() string { return proto.CompactTextString(m) }
func (*EditDatasetRequest) ProtoMessage()    {}
func (*EditDatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{4}
}
func (m *EditDatasetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditDatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditDatasetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditDatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditDatasetRequest.Merge(m, src)
}
func (m *EditDatasetRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditDatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditDatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditDatasetRequest proto.InternalMessageInfo

func (m *EditDatasetRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *EditDatasetRequest) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *EditDatasetRequest) GetWorkStatus() ServiceStatus {
	if m != nil {
		return m.WorkStatus
	}
	return unset
}

func (m *EditDatasetRequest) GetHosts() string {
	if m != nil {
		return m.Hosts
	}
	return ""
}

func (m *EditDatasetRequest) GetManageAddresses() string {
	if m != nil {
		return m.ManageAddresses
	}
	return ""
}

func (m *EditDatasetRequest) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *EditDatasetRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type EditDatasetResponse struct {
}

func (m *EditDatasetResponse) Reset()         { *m = EditDatasetResponse{} }
func (m *EditDatasetResponse) String() string { return proto.CompactTextString(m) }
func (*EditDatasetResponse) ProtoMessage()    {}
func (*EditDatasetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{5}
}
func (m *EditDatasetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditDatasetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditDatasetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditDatasetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditDatasetResponse.Merge(m, src)
}
func (m *EditDatasetResponse) XXX_Size() int {
	return m.Size()
}
func (m *EditDatasetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditDatasetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditDatasetResponse proto.InternalMessageInfo

type RenewalDatasetRequest struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	DatasetName string `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	Duration    int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *RenewalDatasetRequest) Reset()         { *m = RenewalDatasetRequest{} }
func (m *RenewalDatasetRequest) String() string { return proto.CompactTextString(m) }
func (*RenewalDatasetRequest) ProtoMessage()    {}
func (*RenewalDatasetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{6}
}
func (m *RenewalDatasetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewalDatasetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewalDatasetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewalDatasetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewalDatasetRequest.Merge(m, src)
}
func (m *RenewalDatasetRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenewalDatasetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewalDatasetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewalDatasetRequest proto.InternalMessageInfo

func (m *RenewalDatasetRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *RenewalDatasetRequest) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *RenewalDatasetRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type RenewalDatasetResponse struct {
	ExpirationTime time.Time `protobuf:"bytes,1,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time"`
}

func (m *RenewalDatasetResponse) Reset()         { *m = RenewalDatasetResponse{} }
func (m *RenewalDatasetResponse) String() string { return proto.CompactTextString(m) }
func (*RenewalDatasetResponse) ProtoMessage()    {}
func (*RenewalDatasetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{7}
}
func (m *RenewalDatasetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewalDatasetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewalDatasetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewalDatasetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewalDatasetResponse.Merge(m, src)
}
func (m *RenewalDatasetResponse) XXX_Size() int {
	return m.Size()
}
func (m *RenewalDatasetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewalDatasetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenewalDatasetResponse proto.InternalMessageInfo

func (m *RenewalDatasetResponse) GetExpirationTime() time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*EditTableRequest)(nil), "blockved.glitterchain.index.EditTableRequest")
	proto.RegisterType((*EditTableResponse)(nil), "blockved.glitterchain.index.EditTableResponse")
	proto.RegisterType((*CreateDatasetRequest)(nil), "blockved.glitterchain.index.CreateDatasetRequest")
	proto.RegisterType((*CreateDatasetResponse)(nil), "blockved.glitterchain.index.CreateDatasetResponse")
	proto.RegisterType((*EditDatasetRequest)(nil), "blockved.glitterchain.index.EditDatasetRequest")
	proto.RegisterType((*EditDatasetResponse)(nil), "blockved.glitterchain.index.EditDatasetResponse")
	proto.RegisterType((*RenewalDatasetRequest)(nil), "blockved.glitterchain.index.RenewalDatasetRequest")
	proto.RegisterType((*RenewalDatasetResponse)(nil), "blockved.glitterchain.index.RenewalDatasetResponse")
}

func init() {
	proto.RegisterFile("blockved/glitterchain/index/tx.proto", fileDescriptor_f95f62838e2ccd4a)
}

var fileDescriptor_f95f62838e2ccd4a = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x52, 0xd4, 0x4c,
	0x14, 0x9d, 0x30, 0xc0, 0x07, 0x77, 0x3e, 0x01, 0x1b, 0xd0, 0xa9, 0x58, 0x06, 0x4c, 0xb9, 0x00,
	0xab, 0x48, 0x74, 0x78, 0x02, 0x50, 0x57, 0x16, 0x2e, 0x02, 0x2b, 0x37, 0xa9, 0x9e, 0xe4, 0x12,
	0x22, 0x49, 0x3a, 0xa4, 0x7b, 0x80, 0x79, 0x06, 0x37, 0x3c, 0x81, 0x4f, 0xe2, 0x03, 0xb0, 0x64,
	0x65, 0xb9, 0x52, 0x6b, 0xe6, 0x45, 0xac, 0x74, 0x27, 0xf3, 0xe7, 0x54, 0x84, 0x2a, 0xd9, 0xb9,
	0xeb, 0xbe, 0xf7, 0xdc, 0x9f, 0x3e, 0xf7, 0x74, 0x37, 0x3c, 0x6f, 0x47, 0xcc, 0x3b, 0x3d, 0x47,
	0xdf, 0x0e, 0xa2, 0x50, 0x08, 0xcc, 0xbc, 0x13, 0x1a, 0x26, 0x76, 0x98, 0xf8, 0x78, 0x69, 0x8b,
	0x4b, 0x2b, 0xcd, 0x98, 0x60, 0xe4, 0x49, 0x89, 0xb2, 0x46, 0x51, 0x96, 0x44, 0xe9, 0x6b, 0x01,
	0x0b, 0x98, 0xc4, 0xd9, 0xf9, 0x4a, 0x85, 0xe8, 0x8f, 0x3d, 0x16, 0xc7, 0x2c, 0xb1, 0xf9, 0x59,
	0xe4, 0x62, 0x12, 0x84, 0x09, 0x16, 0x8e, 0xed, 0xaa, 0x8a, 0x3e, 0x15, 0x94, 0xa3, 0x28, 0xa0,
	0x1b, 0x01, 0x63, 0x41, 0x84, 0xb6, 0xdc, 0xb5, 0x3b, 0xc7, 0xb6, 0x08, 0x63, 0xe4, 0x82, 0xc6,
	0xa9, 0x02, 0x98, 0x9f, 0x34, 0x58, 0x79, 0xeb, 0x87, 0xe2, 0x88, 0xb6, 0x23, 0x74, 0xf0, 0xac,
	0x83, 0x5c, 0x90, 0x67, 0xf0, 0xff, 0x71, 0xc6, 0x62, 0x97, 0xfa, 0x7e, 0x86, 0x9c, 0x37, 0xb5,
	0x4d, 0x6d, 0x6b, 0xd1, 0x69, 0xe4, 0xb6, 0x3d, 0x65, 0xca, 0x21, 0x45, 0x25, 0x37, 0xa1, 0x31,
	0x36, 0x67, 0x14, 0xa4, 0xb0, 0xbd, 0xa7, 0x31, 0x92, 0xa7, 0x00, 0x22, 0xcf, 0xaa, 0x00, 0x75,
	0x09, 0x58, 0x94, 0x16, 0xe9, 0x26, 0x30, 0x1b, 0xa3, 0xa0, 0xcd, 0x59, 0xe9, 0x90, 0x6b, 0x73,
	0x15, 0x1e, 0x8e, 0x34, 0xc3, 0x53, 0x96, 0x70, 0x34, 0xbf, 0xcc, 0xc0, 0xda, 0xeb, 0x0c, 0xa9,
	0xc0, 0x37, 0x2a, 0xfb, 0xdf, 0x6d, 0xf3, 0x1d, 0x34, 0x2e, 0x58, 0x76, 0xea, 0x72, 0x41, 0x45,
	0x87, 0xcb, 0x3e, 0x97, 0x5a, 0x2f, 0xac, 0x8a, 0x79, 0x59, 0x87, 0x98, 0x9d, 0x87, 0x1e, 0x1e,
	0xca, 0x08, 0x07, 0xf2, 0x70, 0xb5, 0x26, 0x6b, 0x30, 0x77, 0xc2, 0xb8, 0xe0, 0xc5, 0xa9, 0xd4,
	0x86, 0x6c, 0xc3, 0x4a, 0x4c, 0x13, 0x1a, 0x60, 0xd9, 0x2a, 0xf2, 0xe6, 0x9c, 0x04, 0x2c, 0x2b,
	0xfb, 0x5e, 0x69, 0x1e, 0xb0, 0x32, 0x3f, 0x64, 0x85, 0x6c, 0x42, 0xc3, 0x47, 0xee, 0x65, 0x61,
	0x2a, 0x42, 0x96, 0x34, 0xff, 0x2b, 0xce, 0x30, 0x34, 0x11, 0x1d, 0x16, 0xfc, 0x4e, 0x46, 0xa5,
	0x7b, 0x61, 0x53, 0xdb, 0xaa, 0x3b, 0x83, 0xbd, 0x79, 0x0c, 0xeb, 0x13, 0xec, 0x29, 0x5e, 0xc9,
	0x01, 0x2c, 0xe3, 0x65, 0x1a, 0x2a, 0x98, 0x9b, 0x0b, 0x43, 0x32, 0xd8, 0x68, 0xe9, 0x96, 0x52,
	0x8d, 0x55, 0xaa, 0xc6, 0x3a, 0x2a, 0x55, 0xb3, 0xbf, 0x70, 0xfd, 0x7d, 0xa3, 0x76, 0xf5, 0x63,
	0x43, 0x73, 0x96, 0x86, 0xc1, 0xb9, 0xdb, 0xfc, 0x3c, 0x03, 0x24, 0x1f, 0xde, 0xbf, 0x21, 0x4d,
	0x1f, 0x92, 0xb9, 0x0e, 0xab, 0x63, 0xfc, 0x14, 0xf2, 0xee, 0xc2, 0xba, 0x83, 0x09, 0x5e, 0xd0,
	0xe8, 0x5e, 0x98, 0x1b, 0x95, 0x46, 0x7d, 0x42, 0x1a, 0x01, 0x3c, 0x9a, 0x2c, 0x7d, 0x2f, 0xda,
	0x68, 0x7d, 0xad, 0x43, 0xfd, 0x80, 0x07, 0xe4, 0x1c, 0x1e, 0x8c, 0x69, 0x91, 0xbc, 0xaa, 0x1c,
	0xe1, 0xb4, 0x5b, 0xaf, 0xb7, 0xee, 0x12, 0x52, 0x1c, 0x27, 0x85, 0xc6, 0x08, 0xf5, 0xc4, 0xae,
	0x4c, 0xf1, 0xbb, 0x88, 0xf5, 0x97, 0xb7, 0x0f, 0x28, 0x2a, 0x76, 0x61, 0x69, 0x9c, 0x5a, 0x52,
	0xdd, 0xf7, 0x54, 0x09, 0xe8, 0xbb, 0x77, 0x8a, 0x29, 0x4a, 0x7f, 0x84, 0xc5, 0xc1, 0x23, 0x4a,
	0x76, 0xfe, 0xd8, 0xf9, 0xe8, 0xcb, 0xaf, 0x5b, 0xb7, 0x85, 0xab, 0x5a, 0xfb, 0xf1, 0x75, 0xcf,
	0xd0, 0x6e, 0x7a, 0x86, 0xf6, 0xb3, 0x67, 0x68, 0x57, 0x7d, 0xa3, 0x76, 0xd3, 0x37, 0x6a, 0xdf,
	0xfa, 0x46, 0xed, 0xc3, 0x61, 0x10, 0x8a, 0x93, 0x4e, 0xdb, 0xf2, 0x58, 0x5c, 0x7e, 0x53, 0x09,
	0x8a, 0xfc, 0x16, 0xda, 0x32, 0xe5, 0x8e, 0x8f, 0x69, 0xe9, 0x70, 0xd5, 0xdf, 0x57, 0xf9, 0x91,
	0x76, 0x53, 0xe4, 0xed, 0x79, 0x09, 0xdc, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xab, 0xff,
	0x29, 0x74, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	EditDataset(ctx context.Context, in *EditDatasetRequest, opts ...grpc.CallOption) (*EditDatasetResponse, error)
	RenewalDataset(ctx context.Context, in *RenewalDatasetRequest, opts ...grpc.CallOption) (*RenewalDatasetResponse, error)
	EditTable(ctx context.Context, in *EditTableRequest, opts ...grpc.CallOption) (*EditTableResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/CreateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditDataset(ctx context.Context, in *EditDatasetRequest, opts ...grpc.CallOption) (*EditDatasetResponse, error) {
	out := new(EditDatasetResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/EditDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenewalDataset(ctx context.Context, in *RenewalDatasetRequest, opts ...grpc.CallOption) (*RenewalDatasetResponse, error) {
	out := new(RenewalDatasetResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/RenewalDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditTable(ctx context.Context, in *EditTableRequest, opts ...grpc.CallOption) (*EditTableResponse, error) {
	out := new(EditTableResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/EditTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	EditDataset(context.Context, *EditDatasetRequest) (*EditDatasetResponse, error)
	RenewalDataset(context.Context, *RenewalDatasetRequest) (*RenewalDatasetResponse, error)
	EditTable(context.Context, *EditTableRequest) (*EditTableResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDataset(ctx context.Context, req *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (*UnimplementedMsgServer) EditDataset(ctx context.Context, req *EditDatasetRequest) (*EditDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDataset not implemented")
}
func (*UnimplementedMsgServer) RenewalDataset(ctx context.Context, req *RenewalDatasetRequest) (*RenewalDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewalDataset not implemented")
}
func (*UnimplementedMsgServer) EditTable(ctx context.Context, req *EditTableRequest) (*EditTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTable not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/CreateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/EditDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditDataset(ctx, req.(*EditDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenewalDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewalDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenewalDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/RenewalDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenewalDataset(ctx, req.(*RenewalDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/EditTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditTable(ctx, req.(*EditTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockved.glitterchain.index.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataset",
			Handler:    _Msg_CreateDataset_Handler,
		},
		{
			MethodName: "EditDataset",
			Handler:    _Msg_EditDataset_Handler,
		},
		{
			MethodName: "RenewalDataset",
			Handler:    _Msg_RenewalDataset_Handler,
		},
		{
			MethodName: "EditTable",
			Handler:    _Msg_EditTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockved/glitterchain/index/tx.proto",
}

func (m *EditTableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditTableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditTableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EditTableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditTableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditTableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateDatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDatasetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ManageAddresses) > 0 {
		i -= len(m.ManageAddresses)
		copy(dAtA[i:], m.ManageAddresses)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManageAddresses)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hosts) > 0 {
		i -= len(m.Hosts)
		copy(dAtA[i:], m.Hosts)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hosts)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkStatus != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDatasetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDatasetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDatasetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EditDatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditDatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditDatasetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ManageAddresses) > 0 {
		i -= len(m.ManageAddresses)
		copy(dAtA[i:], m.ManageAddresses)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManageAddresses)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hosts) > 0 {
		i -= len(m.Hosts)
		copy(dAtA[i:], m.Hosts)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hosts)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkStatus != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EditDatasetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditDatasetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditDatasetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RenewalDatasetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewalDatasetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewalDatasetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenewalDatasetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewalDatasetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewalDatasetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpirationTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EditTableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EditTableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateDatasetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkStatus != 0 {
		n += 1 + sovTx(uint64(m.WorkStatus))
	}
	l = len(m.Hosts)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ManageAddresses)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	return n
}

func (m *CreateDatasetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *EditDatasetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkStatus != 0 {
		n += 1 + sovTx(uint64(m.WorkStatus))
	}
	l = len(m.Hosts)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ManageAddresses)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EditDatasetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RenewalDatasetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	return n
}

func (m *RenewalDatasetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpirationTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EditTableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditTableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditTableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditTableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditTableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditTableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkStatus", wireType)
			}
			m.WorkStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkStatus |= ServiceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManageAddresses = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDatasetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDatasetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDatasetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditDatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditDatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditDatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkStatus", wireType)
			}
			m.WorkStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkStatus |= ServiceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManageAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManageAddresses = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditDatasetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditDatasetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditDatasetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewalDatasetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewalDatasetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewalDatasetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewalDatasetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewalDatasetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewalDatasetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
