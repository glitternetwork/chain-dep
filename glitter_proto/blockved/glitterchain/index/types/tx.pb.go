// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockved/glitterchain/index/tx.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	common "github.com/glitternetwork/chain-dep/glitter_proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SQLExecRequest struct {
	Uid       string             `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Sql       string             `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	Arguments []*common.Argument `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (m *SQLExecRequest) Reset()         { *m = SQLExecRequest{} }
func (m *SQLExecRequest) String() string { return proto.CompactTextString(m) }
func (*SQLExecRequest) ProtoMessage()    {}
func (*SQLExecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{0}
}
func (m *SQLExecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLExecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLExecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLExecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLExecRequest.Merge(m, src)
}
func (m *SQLExecRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLExecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLExecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLExecRequest proto.InternalMessageInfo

func (m *SQLExecRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SQLExecRequest) GetSql() string {
	if m != nil {
		return m.Sql
	}
	return ""
}

func (m *SQLExecRequest) GetArguments() []*common.Argument {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SQLExecResponse struct {
	Results   []*common.ResultSet `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	TookTimes float32             `protobuf:"fixed32,2,opt,name=took_times,json=tookTimes,proto3" json:"took_times,omitempty"`
}

func (m *SQLExecResponse) Reset()         { *m = SQLExecResponse{} }
func (m *SQLExecResponse) String() string { return proto.CompactTextString(m) }
func (*SQLExecResponse) ProtoMessage()    {}
func (*SQLExecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{1}
}
func (m *SQLExecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLExecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLExecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLExecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLExecResponse.Merge(m, src)
}
func (m *SQLExecResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLExecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLExecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLExecResponse proto.InternalMessageInfo

func (m *SQLExecResponse) GetResults() []*common.ResultSet {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SQLExecResponse) GetTookTimes() float32 {
	if m != nil {
		return m.TookTimes
	}
	return 0
}

type SQLGrantRequest struct {
	Uid        string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	OnTable    string `protobuf:"bytes,2,opt,name=onTable,proto3" json:"onTable,omitempty"`
	ToUID      string `protobuf:"bytes,3,opt,name=toUID,proto3" json:"toUID,omitempty"`
	Role       string `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	OnDatabase string `protobuf:"bytes,5,opt,name=onDatabase,proto3" json:"onDatabase,omitempty"`
}

func (m *SQLGrantRequest) Reset()         { *m = SQLGrantRequest{} }
func (m *SQLGrantRequest) String() string { return proto.CompactTextString(m) }
func (*SQLGrantRequest) ProtoMessage()    {}
func (*SQLGrantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{2}
}
func (m *SQLGrantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLGrantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLGrantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLGrantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLGrantRequest.Merge(m, src)
}
func (m *SQLGrantRequest) XXX_Size() int {
	return m.Size()
}
func (m *SQLGrantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLGrantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SQLGrantRequest proto.InternalMessageInfo

func (m *SQLGrantRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SQLGrantRequest) GetOnTable() string {
	if m != nil {
		return m.OnTable
	}
	return ""
}

func (m *SQLGrantRequest) GetToUID() string {
	if m != nil {
		return m.ToUID
	}
	return ""
}

func (m *SQLGrantRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *SQLGrantRequest) GetOnDatabase() string {
	if m != nil {
		return m.OnDatabase
	}
	return ""
}

type SQLGrantResponse struct {
}

func (m *SQLGrantResponse) Reset()         { *m = SQLGrantResponse{} }
func (m *SQLGrantResponse) String() string { return proto.CompactTextString(m) }
func (*SQLGrantResponse) ProtoMessage()    {}
func (*SQLGrantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{3}
}
func (m *SQLGrantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SQLGrantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SQLGrantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SQLGrantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLGrantResponse.Merge(m, src)
}
func (m *SQLGrantResponse) XXX_Size() int {
	return m.Size()
}
func (m *SQLGrantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLGrantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SQLGrantResponse proto.InternalMessageInfo

type BindHostRequest struct {
	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Url      string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *BindHostRequest) Reset()         { *m = BindHostRequest{} }
func (m *BindHostRequest) String() string { return proto.CompactTextString(m) }
func (*BindHostRequest) ProtoMessage()    {}
func (*BindHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{4}
}
func (m *BindHostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindHostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindHostRequest.Merge(m, src)
}
func (m *BindHostRequest) XXX_Size() int {
	return m.Size()
}
func (m *BindHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BindHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BindHostRequest proto.InternalMessageInfo

func (m *BindHostRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *BindHostRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *BindHostRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type BindHostResponse struct {
}

func (m *BindHostResponse) Reset()         { *m = BindHostResponse{} }
func (m *BindHostResponse) String() string { return proto.CompactTextString(m) }
func (*BindHostResponse) ProtoMessage()    {}
func (*BindHostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f95f62838e2ccd4a, []int{5}
}
func (m *BindHostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindHostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindHostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindHostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindHostResponse.Merge(m, src)
}
func (m *BindHostResponse) XXX_Size() int {
	return m.Size()
}
func (m *BindHostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BindHostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BindHostResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SQLExecRequest)(nil), "blockved.glitterchain.index.SQLExecRequest")
	proto.RegisterType((*SQLExecResponse)(nil), "blockved.glitterchain.index.SQLExecResponse")
	proto.RegisterType((*SQLGrantRequest)(nil), "blockved.glitterchain.index.SQLGrantRequest")
	proto.RegisterType((*SQLGrantResponse)(nil), "blockved.glitterchain.index.SQLGrantResponse")
	proto.RegisterType((*BindHostRequest)(nil), "blockved.glitterchain.index.BindHostRequest")
	proto.RegisterType((*BindHostResponse)(nil), "blockved.glitterchain.index.BindHostResponse")
}

func init() {
	proto.RegisterFile("blockved/glitterchain/index/tx.proto", fileDescriptor_f95f62838e2ccd4a)
}

var fileDescriptor_f95f62838e2ccd4a = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xe3, 0x96, 0x34, 0x83, 0x44, 0xc3, 0xaa, 0x12, 0x96, 0x11, 0x56, 0x65, 0x71, 0xa8,
	0x54, 0x6a, 0x4b, 0xe5, 0x0b, 0xa8, 0x8a, 0x00, 0x09, 0x0e, 0x75, 0xca, 0x05, 0x09, 0x45, 0x76,
	0x3c, 0x72, 0xad, 0xac, 0x77, 0x13, 0xef, 0x1a, 0xc2, 0x17, 0x70, 0xe5, 0x87, 0xb8, 0x73, 0xec,
	0x91, 0x23, 0x4a, 0x7e, 0x04, 0xed, 0xae, 0xb7, 0x09, 0x95, 0x48, 0x72, 0x9b, 0x7d, 0xf3, 0xf6,
	0xbd, 0x99, 0x9d, 0x1d, 0x78, 0x9e, 0x51, 0x3e, 0x9e, 0x7c, 0xc1, 0x3c, 0x2e, 0x68, 0x29, 0x25,
	0xd6, 0xe3, 0x9b, 0xb4, 0x64, 0x71, 0xc9, 0x72, 0x9c, 0xc7, 0x72, 0x1e, 0x4d, 0x6b, 0x2e, 0x39,
	0x79, 0x6a, 0x59, 0xd1, 0x3a, 0x2b, 0xd2, 0x2c, 0xff, 0xa8, 0xe0, 0x05, 0xd7, 0xbc, 0x58, 0x45,
	0xe6, 0x8a, 0xff, 0x64, 0xcc, 0xab, 0x8a, 0xb3, 0x58, 0xcc, 0xe8, 0x08, 0x59, 0x51, 0x32, 0x34,
	0x89, 0x30, 0x87, 0x47, 0xc3, 0xab, 0xf7, 0xaf, 0xe7, 0x38, 0x4e, 0x70, 0xd6, 0xa0, 0x90, 0x64,
	0x00, 0x6e, 0x53, 0xe6, 0x9e, 0x73, 0xec, 0x9c, 0xf4, 0x13, 0x15, 0x2a, 0x44, 0xcc, 0xa8, 0xd7,
	0x35, 0x88, 0x98, 0x51, 0x12, 0x41, 0x3f, 0xad, 0x8b, 0xa6, 0x42, 0x26, 0x85, 0xe7, 0x1e, 0xbb,
	0x27, 0x0f, 0xcf, 0x07, 0x91, 0xb1, 0x88, 0x5e, 0xb5, 0x89, 0x64, 0x45, 0x09, 0x3f, 0xc3, 0xe1,
	0x9d, 0x8b, 0x98, 0x72, 0x26, 0x90, 0x9c, 0x42, 0xaf, 0x46, 0xd1, 0x50, 0x29, 0x3c, 0x47, 0x0b,
	0x3c, 0xb6, 0x02, 0x89, 0x86, 0x87, 0x28, 0x13, 0xcb, 0x20, 0xcf, 0x00, 0x24, 0xe7, 0x93, 0x91,
	0x2c, 0x2b, 0x14, 0xba, 0x90, 0x6e, 0xd2, 0x57, 0xc8, 0xb5, 0x02, 0xc2, 0xef, 0x8e, 0xd6, 0x7f,
	0x53, 0xa7, 0x4c, 0xfe, 0xbf, 0x0d, 0x0f, 0x7a, 0x9c, 0x5d, 0xa7, 0x19, 0xc5, 0xb6, 0x15, 0x7b,
	0x24, 0x47, 0xb0, 0x2f, 0xf9, 0xc7, 0x77, 0x97, 0x9e, 0xab, 0x71, 0x73, 0x20, 0x04, 0xf6, 0x6a,
	0x4e, 0xd1, 0xdb, 0xd3, 0xa0, 0x8e, 0x49, 0x00, 0xc0, 0xd9, 0x65, 0x2a, 0xd3, 0x2c, 0x15, 0xe8,
	0xed, 0xeb, 0xcc, 0x1a, 0x12, 0x12, 0x18, 0xac, 0x0a, 0x31, 0x9d, 0x86, 0x57, 0x70, 0x78, 0x51,
	0xb2, 0xfc, 0x2d, 0x17, 0x1b, 0x8a, 0xf3, 0xe1, 0x20, 0xb7, 0xb2, 0xa6, 0xba, 0xbb, 0xb3, 0x66,
	0xd7, 0xb4, 0x2d, 0x4e, 0x85, 0xca, 0x66, 0x25, 0x69, 0x6c, 0xce, 0x7f, 0x76, 0xc1, 0xfd, 0x20,
	0x0a, 0x92, 0x43, 0xaf, 0x7d, 0x6b, 0x72, 0x1a, 0x6d, 0xf8, 0x29, 0xd1, 0xbf, 0x73, 0xf7, 0x5f,
	0xec, 0x46, 0x6e, 0xc7, 0x57, 0xc0, 0x81, 0x6d, 0x94, 0x6c, 0xbd, 0xb9, 0x3e, 0x18, 0xff, 0x6c,
	0x47, 0xf6, 0xca, 0xc8, 0xb6, 0xba, 0xc5, 0xe8, 0xde, 0x23, 0x6f, 0x31, 0xba, 0xff, 0x7e, 0x17,
	0xd5, 0xaf, 0x45, 0xe0, 0xdc, 0x2e, 0x02, 0xe7, 0xcf, 0x22, 0x70, 0x7e, 0x2c, 0x83, 0xce, 0xed,
	0x32, 0xe8, 0xfc, 0x5e, 0x06, 0x9d, 0x4f, 0xc3, 0xa2, 0x94, 0x37, 0x4d, 0xa6, 0xfe, 0xa7, 0xdd,
	0x4b, 0x86, 0xf2, 0x2b, 0xaf, 0x27, 0xb1, 0x56, 0x3c, 0xcb, 0x71, 0x6a, 0x13, 0x23, 0xb3, 0x7a,
	0x1b, 0xf7, 0xf8, 0xdb, 0x14, 0x45, 0xf6, 0x40, 0x13, 0x5f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0x6c, 0x67, 0x90, 0xf3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SQLExec(ctx context.Context, in *SQLExecRequest, opts ...grpc.CallOption) (*SQLExecResponse, error)
	SQLGrant(ctx context.Context, in *SQLGrantRequest, opts ...grpc.CallOption) (*SQLGrantResponse, error)
	BindHost(ctx context.Context, in *BindHostRequest, opts ...grpc.CallOption) (*BindHostResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SQLExec(ctx context.Context, in *SQLExecRequest, opts ...grpc.CallOption) (*SQLExecResponse, error) {
	out := new(SQLExecResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/SQLExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SQLGrant(ctx context.Context, in *SQLGrantRequest, opts ...grpc.CallOption) (*SQLGrantResponse, error) {
	out := new(SQLGrantResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/SQLGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BindHost(ctx context.Context, in *BindHostRequest, opts ...grpc.CallOption) (*BindHostResponse, error) {
	out := new(BindHostResponse)
	err := c.cc.Invoke(ctx, "/blockved.glitterchain.index.Msg/BindHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SQLExec(context.Context, *SQLExecRequest) (*SQLExecResponse, error)
	SQLGrant(context.Context, *SQLGrantRequest) (*SQLGrantResponse, error)
	BindHost(context.Context, *BindHostRequest) (*BindHostResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SQLExec(ctx context.Context, req *SQLExecRequest) (*SQLExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLExec not implemented")
}
func (*UnimplementedMsgServer) SQLGrant(ctx context.Context, req *SQLGrantRequest) (*SQLGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SQLGrant not implemented")
}
func (*UnimplementedMsgServer) BindHost(ctx context.Context, req *BindHostRequest) (*BindHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindHost not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SQLExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SQLExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/SQLExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SQLExec(ctx, req.(*SQLExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SQLGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SQLGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/SQLGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SQLGrant(ctx, req.(*SQLGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BindHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BindHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockved.glitterchain.index.Msg/BindHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BindHost(ctx, req.(*BindHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockved.glitterchain.index.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SQLExec",
			Handler:    _Msg_SQLExec_Handler,
		},
		{
			MethodName: "SQLGrant",
			Handler:    _Msg_SQLGrant_Handler,
		},
		{
			MethodName: "BindHost",
			Handler:    _Msg_BindHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockved/glitterchain/index/tx.proto",
}

func (m *SQLExecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLExecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLExecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Arguments) > 0 {
		for iNdEx := len(m.Arguments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Arguments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLExecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLExecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLExecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TookTimes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TookTimes))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SQLGrantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLGrantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLGrantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OnDatabase) > 0 {
		i -= len(m.OnDatabase)
		copy(dAtA[i:], m.OnDatabase)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OnDatabase)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToUID) > 0 {
		i -= len(m.ToUID)
		copy(dAtA[i:], m.ToUID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToUID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OnTable) > 0 {
		i -= len(m.OnTable)
		copy(dAtA[i:], m.OnTable)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OnTable)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SQLGrantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQLGrantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SQLGrantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BindHostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindHostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindHostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BindHostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindHostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindHostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SQLExecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *SQLExecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.TookTimes != 0 {
		n += 5
	}
	return n
}

func (m *SQLGrantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OnTable)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToUID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OnDatabase)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *SQLGrantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BindHostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *BindHostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SQLExecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLExecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLExecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &common.Argument{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLExecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLExecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLExecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &common.ResultSet{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TookTimes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TookTimes = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLGrantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLGrantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLGrantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnTable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnTable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDatabase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnDatabase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQLGrantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQLGrantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQLGrantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindHostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindHostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindHostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindHostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindHostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindHostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
