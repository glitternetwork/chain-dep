// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockved/glitterchain/consumer/consumer.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/glitternetwork/chain-dep/glitter_proto/common"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// consumer pledge dataset token
type CPDT struct {
	DatasetName string                                 `protobuf:"bytes,1,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *CPDT) Reset()         { *m = CPDT{} }
func (m *CPDT) String() string { return proto.CompactTextString(m) }
func (*CPDT) ProtoMessage()    {}
func (*CPDT) Descriptor() ([]byte, []int) {
	return fileDescriptor_62febd0321fd018a, []int{0}
}
func (m *CPDT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPDT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPDT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPDT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPDT.Merge(m, src)
}
func (m *CPDT) XXX_Size() int {
	return m.Size()
}
func (m *CPDT) XXX_DiscardUnknown() {
	xxx_messageInfo_CPDT.DiscardUnknown(m)
}

var xxx_messageInfo_CPDT proto.InternalMessageInfo

func (m *CPDT) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

type Consumer struct {
	Address     string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CPDTs       []*CPDT `protobuf:"bytes,2,rep,name=CPDTs,proto3" json:"CPDTs,omitempty" yaml:"cpdts"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Consumer) Reset()         { *m = Consumer{} }
func (m *Consumer) String() string { return proto.CompactTextString(m) }
func (*Consumer) ProtoMessage()    {}
func (*Consumer) Descriptor() ([]byte, []int) {
	return fileDescriptor_62febd0321fd018a, []int{1}
}
func (m *Consumer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consumer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consumer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Consumer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consumer.Merge(m, src)
}
func (m *Consumer) XXX_Size() int {
	return m.Size()
}
func (m *Consumer) XXX_DiscardUnknown() {
	xxx_messageInfo_Consumer.DiscardUnknown(m)
}

var xxx_messageInfo_Consumer proto.InternalMessageInfo

func (m *Consumer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Consumer) GetCPDTs() []*CPDT {
	if m != nil {
		return m.CPDTs
	}
	return nil
}

func (m *Consumer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ReleasingCPDT struct {
	ConsumerAddress string                `protobuf:"bytes,1,opt,name=consumer_address,json=consumerAddress,proto3" json:"consumer_address,omitempty" yaml:"consumer_address"`
	DatasetName     string                `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty" yaml:"dataset_name"`
	Entries         []*ReleasingCPDTEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *ReleasingCPDT) Reset()         { *m = ReleasingCPDT{} }
func (m *ReleasingCPDT) String() string { return proto.CompactTextString(m) }
func (*ReleasingCPDT) ProtoMessage()    {}
func (*ReleasingCPDT) Descriptor() ([]byte, []int) {
	return fileDescriptor_62febd0321fd018a, []int{2}
}
func (m *ReleasingCPDT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleasingCPDT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleasingCPDT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleasingCPDT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasingCPDT.Merge(m, src)
}
func (m *ReleasingCPDT) XXX_Size() int {
	return m.Size()
}
func (m *ReleasingCPDT) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasingCPDT.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasingCPDT proto.InternalMessageInfo

func (m *ReleasingCPDT) GetConsumerAddress() string {
	if m != nil {
		return m.ConsumerAddress
	}
	return ""
}

func (m *ReleasingCPDT) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *ReleasingCPDT) GetEntries() []*ReleasingCPDTEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ReleasingCPDTs struct {
	Pledges []ReleasingCPDT `protobuf:"bytes,1,rep,name=pledges,proto3" json:"pledges"`
}

func (m *ReleasingCPDTs) Reset()         { *m = ReleasingCPDTs{} }
func (m *ReleasingCPDTs) String() string { return proto.CompactTextString(m) }
func (*ReleasingCPDTs) ProtoMessage()    {}
func (*ReleasingCPDTs) Descriptor() ([]byte, []int) {
	return fileDescriptor_62febd0321fd018a, []int{3}
}
func (m *ReleasingCPDTs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleasingCPDTs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleasingCPDTs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleasingCPDTs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasingCPDTs.Merge(m, src)
}
func (m *ReleasingCPDTs) XXX_Size() int {
	return m.Size()
}
func (m *ReleasingCPDTs) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasingCPDTs.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasingCPDTs proto.InternalMessageInfo

func (m *ReleasingCPDTs) GetPledges() []ReleasingCPDT {
	if m != nil {
		return m.Pledges
	}
	return nil
}

type ReleasingCPDTEntry struct {
	CreationHeight int64                                  `protobuf:"varint,1,opt,name=creationHeight,proto3" json:"creationHeight,omitempty" yaml:"creation_height"`
	CompletionTime time.Time                              `protobuf:"bytes,2,opt,name=completionTime,proto3,stdtime" json:"completionTime" yaml:"completion_time"`
	Amount         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *ReleasingCPDTEntry) Reset()         { *m = ReleasingCPDTEntry{} }
func (m *ReleasingCPDTEntry) String() string { return proto.CompactTextString(m) }
func (*ReleasingCPDTEntry) ProtoMessage()    {}
func (*ReleasingCPDTEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_62febd0321fd018a, []int{4}
}
func (m *ReleasingCPDTEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleasingCPDTEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleasingCPDTEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleasingCPDTEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasingCPDTEntry.Merge(m, src)
}
func (m *ReleasingCPDTEntry) XXX_Size() int {
	return m.Size()
}
func (m *ReleasingCPDTEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasingCPDTEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasingCPDTEntry proto.InternalMessageInfo

func (m *ReleasingCPDTEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *ReleasingCPDTEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*CPDT)(nil), "blockved.glitterchain.consumer.CPDT")
	proto.RegisterType((*Consumer)(nil), "blockved.glitterchain.consumer.Consumer")
	proto.RegisterType((*ReleasingCPDT)(nil), "blockved.glitterchain.consumer.ReleasingCPDT")
	proto.RegisterType((*ReleasingCPDTs)(nil), "blockved.glitterchain.consumer.ReleasingCPDTs")
	proto.RegisterType((*ReleasingCPDTEntry)(nil), "blockved.glitterchain.consumer.ReleasingCPDTEntry")
}

func init() {
	proto.RegisterFile("blockved/glitterchain/consumer/consumer.proto", fileDescriptor_62febd0321fd018a)
}

var fileDescriptor_62febd0321fd018a = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x93, 0xd2, 0xc0, 0xa6, 0x04, 0x64, 0x10, 0x75, 0x82, 0x64, 0x47, 0x2b, 0x04, 0xbd,
	0xc4, 0x96, 0xc2, 0xad, 0x37, 0x5c, 0xa8, 0x40, 0x02, 0x84, 0xac, 0xc0, 0x81, 0x8b, 0xb5, 0xb1,
	0xb7, 0x8e, 0x15, 0xef, 0xae, 0xe5, 0xdd, 0x50, 0xe5, 0x0f, 0x38, 0xf6, 0x07, 0xf8, 0x9f, 0x1c,
	0x7b, 0x44, 0x1c, 0x0c, 0x24, 0x7f, 0x90, 0x2f, 0x40, 0x5e, 0xaf, 0x2b, 0x27, 0x48, 0x54, 0xa8,
	0x27, 0x7b, 0xe7, 0xbd, 0x79, 0x33, 0xf3, 0xb4, 0xb3, 0x60, 0x38, 0x49, 0x58, 0x30, 0xfb, 0x82,
	0x43, 0x27, 0x4a, 0x62, 0x21, 0x70, 0x16, 0x4c, 0x51, 0x4c, 0x9d, 0x80, 0x51, 0x3e, 0x27, 0x38,
	0xbb, 0xfa, 0xb1, 0xd3, 0x8c, 0x09, 0xa6, 0x9b, 0x15, 0xdd, 0xae, 0xd3, 0xed, 0x8a, 0xd5, 0xef,
	0x05, 0x8c, 0x13, 0xc6, 0x7d, 0xc9, 0x76, 0xca, 0x43, 0x99, 0xda, 0x7f, 0x18, 0xb1, 0x88, 0x95,
	0xf1, 0xe2, 0x4f, 0x45, 0x7b, 0x11, 0x63, 0x51, 0x82, 0x1d, 0x79, 0x9a, 0xcc, 0xcf, 0x1c, 0x44,
	0x17, 0x0a, 0xb2, 0x76, 0x21, 0x11, 0x13, 0xcc, 0x05, 0x22, 0x69, 0xa5, 0x18, 0x30, 0x42, 0x18,
	0x75, 0xb8, 0x40, 0xb3, 0x98, 0x46, 0x65, 0x14, 0x9e, 0x83, 0xbd, 0x93, 0x0f, 0x2f, 0xc7, 0xfa,
	0x33, 0x70, 0x10, 0x22, 0x81, 0x38, 0x16, 0x3e, 0x45, 0x04, 0x1b, 0xda, 0x40, 0x3b, 0xba, 0xe3,
	0xee, 0x2d, 0x73, 0x4b, 0xf3, 0x3a, 0x0a, 0x79, 0x8f, 0x08, 0xd6, 0x4f, 0xc1, 0x3e, 0x22, 0x6c,
	0x4e, 0x85, 0xd1, 0x94, 0x14, 0x7b, 0x99, 0x5b, 0x8d, 0x1f, 0xb9, 0xf5, 0x34, 0x8a, 0xc5, 0x74,
	0x3e, 0xb1, 0x03, 0x46, 0xd4, 0x24, 0xea, 0x33, 0xe4, 0xe1, 0xcc, 0x11, 0x8b, 0x14, 0x73, 0xfb,
	0x0d, 0x15, 0x9e, 0xca, 0x86, 0xdf, 0x34, 0x70, 0xfb, 0x44, 0x19, 0xa1, 0x1b, 0xa0, 0x8d, 0xc2,
	0x30, 0xc3, 0x9c, 0x97, 0x85, 0xbd, 0xea, 0xa8, 0x7f, 0x04, 0xb7, 0x8a, 0xfe, 0xb8, 0xd1, 0x1c,
	0xb4, 0x8e, 0x3a, 0xa3, 0x27, 0xf6, 0xbf, 0x2d, 0xb5, 0x0b, 0xb2, 0xdb, 0x5b, 0xe5, 0x56, 0x99,
	0xb6, 0xc9, 0xad, 0x83, 0x05, 0x22, 0xc9, 0x31, 0x0c, 0xd2, 0x50, 0x70, 0xe8, 0x95, 0x61, 0x7d,
	0x00, 0x3a, 0x21, 0xe6, 0x41, 0x16, 0xa7, 0x22, 0x66, 0xd4, 0x68, 0xc9, 0xa2, 0xf5, 0x10, 0xfc,
	0xad, 0x81, 0xbb, 0x1e, 0x4e, 0x30, 0xe2, 0x31, 0x8d, 0xa4, 0x45, 0xa7, 0xe0, 0x7e, 0x55, 0xc6,
	0xdf, 0xea, 0xd6, 0x7d, 0xbc, 0xc9, 0xad, 0x43, 0x55, 0x66, 0x87, 0x01, 0xbd, 0x7b, 0x55, 0xe8,
	0x85, 0x1a, 0xe9, 0x78, 0xc7, 0xea, 0xd2, 0xc7, 0xc3, 0x4d, 0x6e, 0x3d, 0x28, 0x35, 0xea, 0x28,
	0xdc, 0x76, 0xff, 0x2d, 0x68, 0x63, 0x2a, 0xb2, 0x18, 0x73, 0xa3, 0x25, 0x0d, 0x19, 0x5d, 0x67,
	0xc8, 0xd6, 0x0c, 0xaf, 0xa8, 0xc8, 0x16, 0x5e, 0x25, 0x01, 0x7d, 0xd0, 0xdd, 0x82, 0xb9, 0xfe,
	0x0e, 0xb4, 0xd3, 0x04, 0x87, 0x11, 0x2e, 0x46, 0x2b, 0xf4, 0x87, 0xff, 0xa5, 0x2f, 0x2f, 0x4c,
	0xc3, 0xab, 0x34, 0xe0, 0xd7, 0x26, 0xd0, 0xff, 0x6e, 0x40, 0x77, 0x41, 0x37, 0xc8, 0x30, 0x2a,
	0x7c, 0x7e, 0x8d, 0xe3, 0x68, 0x2a, 0xa4, 0x8f, 0x2d, 0xb7, 0xbf, 0xc9, 0xad, 0x47, 0xca, 0x47,
	0x85, 0xfb, 0x53, 0x49, 0x80, 0xde, 0x4e, 0x86, 0x7e, 0x06, 0xba, 0x01, 0x23, 0x69, 0x82, 0x8b,
	0xd8, 0x38, 0x56, 0x3e, 0x76, 0x46, 0x7d, 0xbb, 0x5c, 0x04, 0xbb, 0x5a, 0x04, 0x7b, 0x5c, 0x2d,
	0x82, 0x0b, 0x8b, 0xee, 0x6a, 0x35, 0xae, 0xf2, 0xfd, 0x62, 0x59, 0xe0, 0xc5, 0x4f, 0x4b, 0xf3,
	0x76, 0x54, 0x6b, 0xf7, 0xbd, 0x75, 0x93, 0xfb, 0xee, 0xa6, 0xcb, 0x95, 0xa9, 0x5d, 0xae, 0x4c,
	0xed, 0xd7, 0xca, 0xd4, 0x2e, 0xd6, 0x66, 0xe3, 0x72, 0x6d, 0x36, 0xbe, 0xaf, 0xcd, 0xc6, 0xe7,
	0x4f, 0x35, 0x25, 0xe5, 0x31, 0xc5, 0xe2, 0x9c, 0x65, 0x33, 0x47, 0x7a, 0x3d, 0x0c, 0x71, 0x5a,
	0x01, 0xea, 0xa9, 0xb8, 0xe6, 0x19, 0x92, 0xd5, 0x27, 0xfb, 0x92, 0xfb, 0xfc, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0x3b, 0xd4, 0x9c, 0xb5, 0x04, 0x00, 0x00,
}

func (m *CPDT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPDT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPDT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintConsumer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintConsumer(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Consumer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consumer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Consumer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintConsumer(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CPDTs) > 0 {
		for iNdEx := len(m.CPDTs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CPDTs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsumer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConsumer(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReleasingCPDT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleasingCPDT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleasingCPDT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsumer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DatasetName) > 0 {
		i -= len(m.DatasetName)
		copy(dAtA[i:], m.DatasetName)
		i = encodeVarintConsumer(dAtA, i, uint64(len(m.DatasetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConsumerAddress) > 0 {
		i -= len(m.ConsumerAddress)
		copy(dAtA[i:], m.ConsumerAddress)
		i = encodeVarintConsumer(dAtA, i, uint64(len(m.ConsumerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReleasingCPDTs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleasingCPDTs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleasingCPDTs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pledges) > 0 {
		for iNdEx := len(m.Pledges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pledges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsumer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReleasingCPDTEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleasingCPDTEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleasingCPDTEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintConsumer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintConsumer(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintConsumer(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsumer(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsumer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CPDT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovConsumer(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovConsumer(uint64(l))
	return n
}

func (m *Consumer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConsumer(uint64(l))
	}
	if len(m.CPDTs) > 0 {
		for _, e := range m.CPDTs {
			l = e.Size()
			n += 1 + l + sovConsumer(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovConsumer(uint64(l))
	}
	return n
}

func (m *ReleasingCPDT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsumerAddress)
	if l > 0 {
		n += 1 + l + sovConsumer(uint64(l))
	}
	l = len(m.DatasetName)
	if l > 0 {
		n += 1 + l + sovConsumer(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovConsumer(uint64(l))
		}
	}
	return n
}

func (m *ReleasingCPDTs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pledges) > 0 {
		for _, e := range m.Pledges {
			l = e.Size()
			n += 1 + l + sovConsumer(uint64(l))
		}
	}
	return n
}

func (m *ReleasingCPDTEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovConsumer(uint64(m.CreationHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovConsumer(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovConsumer(uint64(l))
	return n
}

func sovConsumer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsumer(x uint64) (n int) {
	return sovConsumer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPDT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPDT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPDT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Consumer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consumer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consumer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPDTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPDTs = append(m.CPDTs, &CPDT{})
			if err := m.CPDTs[len(m.CPDTs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleasingCPDT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleasingCPDT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleasingCPDT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatasetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatasetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &ReleasingCPDTEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleasingCPDTs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleasingCPDTs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleasingCPDTs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pledges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pledges = append(m.Pledges, ReleasingCPDT{})
			if err := m.Pledges[len(m.Pledges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleasingCPDTEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleasingCPDTEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleasingCPDTEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsumer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsumer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsumer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsumer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsumer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsumer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsumer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsumer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsumer = fmt.Errorf("proto: unexpected end of group")
)
